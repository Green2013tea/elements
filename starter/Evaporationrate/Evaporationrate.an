/* Evaporation calculator based on 
http://www.engineeringtoolbox.com/evaporation-water-surface-d_690.html

This engineering function may need to be improved to account for vapour pressure and surface tension

gs = Θ A (xs - x) / 3600         (1)

or

gh = Θ A (xs - x)

where

gs = amount of evaporated water per second (kg/s)

gh = amount of evaporated water per hour (kg/h)

Θ = (25 + 19 v) = evaporation coefficient (kg/m2h)

v = velocity of air above the water surface (m/s)

A = water surface area (m2)

xs = humidity ratio in saturated air at the same temperature as the water surface (kg/kg)  (kg H2O in kg Dry Air)

x = humidity ratio in the air (kg/kg) (kg H2O in kg Dry Air) */
protocol Evaporationrate 

import (
	"fmt"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/eng"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Liquidclasses"	
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

Parameters (
  	
	Volumeperwell Volume // ul
	
	// cubesensor streams:
	Pa wunit.Pressure // in pascals atmospheric pressure of moist air (Pa) 100mBar = 1 pa. Not yet built in unit so we import it from wunit.
	Temp Temperature // input in deg C will be converted to Kelvin
	Relativehumidity float64 // Percentage // density water vapor (kg/m3)
	Airvelocity wunit.Velocity  // // velocity of air above water in m/s ; could be calculated or measured by an anemometer

	Executiontime Time// time 
	
)
Data (
	Status string
	Evaporationrateestimate float64 // ul/h
	Evaporatedliquid Volume // ul
	Estimatedevaporationtime Time
	Warnings []error
)
Inputs (
	Platetype *wtype.LHPlate
	Liquid *wtype.LHComponent
)
Outputs (
)
Requirements {
}
Setup {
} 
Steps {
	}
Analysis {
	
	var surfacearea wunit.Area 
	if  Platetype.Welltype.Shape().LengthUnit == "mm" {
		wellarea, err := Platetype.Welltype.CalculateMaxCrossSectionArea()
		if err != nil {
			Warnings = append(Warnings,fmt.Errorf(err.Error()))
		}
		
		// print statements like this
		fmt.Println("wellarea", wellarea.ToString())
		fmt.Println(Platetype.Welltype.Xdim, Platetype.Welltype.Ydim, Platetype.Welltype.Zdim, Platetype.Welltype.Shape())
	surfacearea = wellarea
	}else {
		Warnings = append(Warnings,fmt.Errorf("plate "+ Platetype.String() +" Wellshape "+ Platetype.Welltype.String() +" surface area not yet calculated due to bottom type"))
		Errorf("plate "+ Platetype.String() +" Wellshape "+ Platetype.Welltype.String() +" surface area not yet calculated due to bottom type")
	}
	var PWS float64 = eng.Pws(Temp)
	var pw float64 = eng.Pw(Relativehumidity, PWS) // vapour partial pressure in Pascals
	
	theta, err := eng.Θ(Liquid.TypeName(), Airvelocity)
	if err!= nil {
		Errorf(err.Error())
	}
	var	Gh = (theta * 
	((surfacearea.RawValue()/1000000)* 
	((eng.Xs(PWS, Pa)) - (eng.X(pw, Pa))))) // Gh is rate of evaporation in kg/h
	evaporatedliquid := (Gh * (Executiontime.SIValue()/3600)) // in kg
	
	density, ok := liquidclasses.Liquidclass[Liquid.TypeName()]["ro"]
	
	if !ok {
		density = liquidclasses.Liquidclass["water"]["ro"]
		Warnings = append(Warnings,fmt.Errorf("liquid density not found for "+ Liquid.TypeName() +" so used water value"))
	}
	
	evaporatedliquid = (evaporatedliquid * density)/1000 // converted to litres
	Evaporatedliquid = wunit.NewVolume((evaporatedliquid*1000000),"ul") // convert to ul
	
	Evaporationrateestimate = Gh*1000000 // ul/h if declared in parameters or data it doesn't need declaring again

	estimatedevaporationtime  := Volumeperwell.ConvertTo(wunit.ParsePrefixedUnit("ul")) / Evaporationrateestimate 
	Estimatedevaporationtime = wunit.NewTime((estimatedevaporationtime*3600),"s") 
	
	
	Status = fmt.Sprintln("Well Surface Area=", 
				surfacearea.ToString(),
				"evaporation rate =", Gh*1000000, "ul/h", 
				"total evaporated liquid =", Evaporatedliquid.ToString(), "after", Executiontime.ToString(),
				"estimated evaporation time = ", Estimatedevaporationtime.ToString(),
				"Warnings =", Warnings)
	
} // works in either analysis or steps sections

Validation {
	if Evaporatedliquid.SIValue() > Volumeperwell.SIValue() {
	Errorf("not enough liquid, Expected that liquid volume " + Volumeperwell.ToString() +" will evaporate during this time " + Executiontime.ToString()  + " Status:  "+ Status)
	}
}

