// Make a general mastermix comprising of a list of components, list of volumes
// and specifying the number of reactions required
protocol MasterMixMaker

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/factory"

)


// Input parameters for this protocol (data)
Parameters (
	Reactionspermastermix int
	ComponentVolumesperReaction []Volume
	Components []string

)

// Data which is returned from this protocol, and data types
Data (
	Status string
)


// Physical Inputs to this protocol with types
Inputs (

	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Mastermix *wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	var mastermix *wtype.LHComponent
	
	if len(Components) != len(ComponentVolumesperReaction){
		Errorf("len(Components) != len(OtherComponentVolumes)")
	}
		
	
		// get components from factory and if not present use default dna component
		
		lhComponents := make([]*wtype.LHComponent,0)
		
		for _,component := range Components {
			
			if factory.ComponentInFactory(component){
				lhComponents = append(lhComponents,factory.GetComponentByType(component))
			}else {
				// if component not in factory use dna as default component type
				defaultcomponent := factory.GetComponentByType("dna")
				defaultcomponent.CName = component
				lhComponents = append(lhComponents,defaultcomponent)
			}
			
		}
		
		
		// now make mastermix
		
		
		eachmastermix := make([]*wtype.LHComponent, 0)
		
		
		for k, component := range lhComponents { 	
			if k == len(lhComponents)-1{
				component.Type = wtype.LTPostMix 
			}
		
		// multiply volume of each component by number of reactions per mastermix
		adjustedvol := wunit.MultiplyVolume(ComponentVolumesperReaction[k],float64(Reactionspermastermix))
			
		componentSample := mixer.Sample(component,adjustedvol)
		
		eachmastermix = append(eachmastermix,componentSample)
		
		
		}
	mastermix = MixInto(OutPlate, "",  eachmastermix...)
	
	Mastermix = mastermix
	
 Status = "Mastermix Made"
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
