// protocol for running pcr for one sample using a mastermix
protocol PCR_vol_mmx

import (
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/enzymes"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Input parameters for this protocol (data)
Parameters (
	// PCRprep parameters:
	MasterMixVolume Volume
	PrimersalreadyAddedtoMasterMix bool
	PolymeraseAlreadyaddedtoMastermix bool
	FwdPrimerVol Volume
	RevPrimerVol Volume
	Templatevolume Volume
	PolymeraseVolume Volume
	ReactionName string
	TemplateName string
	FwdPrimerName string
	RevPrimerName string
	WellPosition string
	Targetsequence DNASequence
	FwdPrimerSeq DNASequence
	RevPrimerSeq DNASequence
	/*
		// let's be ambitious and try this as part of type polymerase Polymeraseconc Volume

		//Templatetype string  // e.g. colony, genomic, pure plasmid... will effect efficiency. We could get more sophisticated here later on...
		//FullTemplatesequence string // better to use Sid's type system here after proof of concept
		//FullTemplatelength int	// clearly could be calculated from the sequence... Sid will have a method to do this already so check!
		//TargetTemplatesequence string // better to use Sid's type system here after proof of concept
		//TargetTemplatelengthinBP int
	*/
	// Reaction parameters: (could be a entered as thermocycle parameters type possibly?)
	Numberofcycles int
	InitDenaturationtime Time
	Denaturationtime Time
	//Denaturationtemp Temperature
	Annealingtime Time
	AnnealingTemp Temperature // Should be calculated from primer and template binding
	Extensiontime Time        // should be calculated from template length and polymerase rate
	Finalextensiontime Time
)

// Data which is returned from this protocol, and data types
Data (
	FWDPrimerBindingSiteinTemplate int
	RevPrimerBindingSiteinTemplate int
)

// Physical Inputs to this protocol with types
Inputs (
	FwdPrimer *LHComponent
	RevPrimer *LHComponent
	MasterMix *LHComponent
	PCRPolymerase *LHComponent
	Template *LHComponent
	OutPlate *LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Reaction *LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	// rename components

	Template.CName = TemplateName
	FwdPrimer.CName = FwdPrimerName
	RevPrimer.CName = RevPrimerName

	// Make a mastermix

	mmxSample := mixer.Sample(MasterMix, MasterMixVolume)

	// pipette out to make mastermix
	mastermix := MixInto(OutPlate, WellPosition, mmxSample)

	// rest samples to zero
	samples := make([]*LHComponent, 0)

	// if this is false do stuff inside {}

	// add primers

	if !PrimersalreadyAddedtoMasterMix {
		FwdPrimerSample := mixer.Sample(FwdPrimer, FwdPrimerVol)
		samples = append(samples, FwdPrimerSample)
		RevPrimerSample := mixer.Sample(RevPrimer, RevPrimerVol)
		samples = append(samples, RevPrimerSample)
	}

	// add template
	templateSample := mixer.Sample(Template, Templatevolume)
	samples = append(samples, templateSample)

	for j := range samples {
		if !PolymeraseAlreadyaddedtoMastermix && j == len(samples)-1 {
			samples[j].Type = wtype.LTPostMix
		}
		mastermix = Mix(mastermix, samples[j])
	}
	reaction := mastermix

	// this needs to go after an initial denaturation!
	if !PolymeraseAlreadyaddedtoMastermix {

		polySample := mixer.Sample(PCRPolymerase, PolymeraseVolume)
		polySample.Type = wtype.LTPostMix

		reaction = Mix(reaction, polySample)
	}

	// thermocycle parameters called from enzyme lookup:

	polymerase := PCRPolymerase.CName

	extensionTemp := enzymes.DNApolymerasetemps[polymerase]["extensiontemp"]
	meltingTemp := enzymes.DNApolymerasetemps[polymerase]["meltingtemp"]

	// initial Denaturation
	Incubate(reaction, meltingTemp, InitDenaturationtime, false)

	for i := 0; i < Numberofcycles; i++ {

		// Denature

		Incubate(reaction, meltingTemp, Denaturationtime, false)

		// Anneal
		Incubate(reaction, AnnealingTemp, Annealingtime, false)

		//extensiontime := TargetTemplatelengthinBP/PCRPolymerase.RateBPpers // we'll get type issues here so leave it out for now

		// Extend
		Incubate(reaction, extensionTemp, Extensiontime, false)

	}
	// Final Extension
	Incubate(reaction, extensionTemp, Finalextensiontime, false)

	// all done
	Reaction = reaction //r1

	Reaction.CName = ReactionName

	//Reaction = Prompt(Reaction, "Put Reactions in ThermoCylcer and return to deck once PCR has finished if running DNA_Gel")
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}

/*type Polymerase struct {
	LHComponent
	Rate_BPpers float64
	Fidelity_errorrate float64 // could dictate how many colonies are checked in validation!
	Extensiontemp Temperature
	Hotstart bool
	StockConcentration Concentration // this is normally in U?
	TargetConcentration Concentration
	// this is also a glycerol solution rather than a watersolution!
}
*/
