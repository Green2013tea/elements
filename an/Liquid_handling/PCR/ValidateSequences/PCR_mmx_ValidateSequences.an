// Perform a single pcr reaction per element and validate that the primers will be expected to bind once each to the template sequence. Exact primer matches only.
// Thermocycle conditions are calculated from the input sequences and polymerase name. 
// Valid Polymerases for calculation of properties are "Q5Polymerase" and "Taq".
protocol PCR_mmx_ValidateSequences

import (
	"fmt"
	"math"
	"strings"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/enzymes"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/text"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/search"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/sequences"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/sequences/oligos"
)



// Input parameters for this protocol (data)
Parameters (
	// PCRprep parameters:
	ReactionName string
	
	// DNA sequence of template from which amplicon will be amplified
	TemplateSequence DNASequence
	
	// Forward primer sequence
	FwdPrimerSeq DNASequence
	
	// Reverse primer sequence
	RevPrimerSeq DNASequence
	
	// Volume of mastermix to add to the reaction
	MasterMixVolume Volume
	
	// Select this if the primers have already been added to the mastermix. 
	// If this is selected no primers will be added to any reactions.
	// Should only be used if all reactions share the same primers.
	PrimersalreadyAddedtoMasterMix bool
	
	// Select this if the polymerase has already been added to the mastermix. 
	PolymeraseAlreadyaddedtoMastermix bool
	
	// Volume of forward primer to add. Will only be used if PrimersalreadyAddedtoMasterMix is not selected.
	FwdPrimerVol Volume
	
	// Volume of reverse primer to add. Will only be used if PrimersalreadyAddedtoMasterMix is not selected.
	RevPrimerVol Volume
	
	// Volume of template to add
	Templatevolume Volume
	
	// Volume of polymerase enzyme to add per reaction. Will only be used if PolymeraseAlreadyaddedtoMastermix is not selected.
	PolymeraseVolume Volume

	// Optionally specify a specific well position here or leave blank for Antha to decide
	OptionalWellPosition string 
	
	// Reaction parameters: (could be a entered as thermocycle parameters type possibly?)
	
	NumberOfCycles int 
	
	// Initial denaturation time prior to starting cycles
	InitDenaturationTime Time
	
	// Denaturation time per cycle
	DenaturationTime Time
	
	// Annealing time per cycle
	AnnealingTime Time
	
	// Time that extension conditions will be held for following completion of all cycles.
	FinalExtensionTime Time
	
	// Degrees C below lowest MeltingTemp to set annealing Temperature.
	AnnealingTempOffset Temperature 
)

// Data which is returned from this protocol, and data types
Data (
	
	// Sequence of the expected product of the PCR reaction
	Amplicon DNASequence
	
	// All exact binding site of the fwd primer found in the template
	FwdPrimerSites []search.Thingfound
	
	// All exact binding site of the rev primer found in the template
	RevPrimerSites []search.Thingfound
	
	// Melting temperature calculated for the forward primer
	FwdPrimerMeltingTemp Temperature
	
	// Melting temperature calculated for the reverse primer
	RevPrimerMeltingTemp Temperature
	
	// Annealing temperature used based upon calculated primer melting temperatures and AnnealingTempOffset.
	AnnealingTemp Temperature
	
	// Extension time calculated based upon Polymerase properties and length of amplicon
	ExtensionTime Time
	
	// Extension time calculated based upon Polymerase properties
	ExtensionTemp Temperature
	
	// Melting temperature calculated based on lowest of primer melting temperatures.
	MeltingTemp Temperature
)


// Physical Inputs to this protocol with types
Inputs (
	
	// Actual FWD primer component to use. Will only be used if PrimersalreadyAddedtoMasterMix is not selected.
	FwdPrimer *LHComponent
	
	// Actual REV primer component to use. Will only be used if PrimersalreadyAddedtoMasterMix is not selected.
	RevPrimer *LHComponent
	
	// Actual Master mix to use
	MasterMix *LHComponent
	
	// Valid options are Q5Polymerase and Taq. Will only be used if PolymeraseAlreadyaddedtoMastermix is not selected.
	PCRPolymerase *LHComponent
	
	// Actual Template component to use
	Template *LHComponent
	
	// Type of plate to set up reaction on. Recommended plate is pcrplate
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	
	// The output PCR reaction
	Reaction *LHComponent
)

Requirements {
	

	
	
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
		
	// rename components
	Template.CName = TemplateSequence.Name()
	FwdPrimer.CName = FwdPrimerSeq.Name()
	RevPrimer.CName = RevPrimerSeq.Name()
	
	// check for non-specific binding. Exact matches only.
	FwdPrimerSites = sequences.FindSeqsinSeqs(TemplateSequence.Sequence(), []string{FwdPrimerSeq.Sequence()})
	
	RevPrimerSites = sequences.FindSeqsinSeqs(TemplateSequence.Sequence(), []string{RevPrimerSeq.Sequence()})

	
	if len(FwdPrimerSites)!=1 || len(RevPrimerSites)!=1{
	
	errordescription := fmt.Sprint(
						fmt.Sprint("Unexpected number of primer binding sites found in template"),
						text.Print("FwdPrimerSitesfound:", fmt.Sprint(FwdPrimerSites)),
						text.Print("RevPrimerSitesfound:", fmt.Sprint(RevPrimerSites)),
	)
	
	Errorf(errordescription)	
	}
	
	fwdposition := FwdPrimerSites[0].Positions[0]
	
	revposition := RevPrimerSites[0].Positions[0]
	
	var startposition int
	var endposition int
	
	if !FwdPrimerSites[0].Reverse && RevPrimerSites[0].Reverse && fwdposition < revposition {
		startposition = fwdposition
		endposition = revposition
	} else if FwdPrimerSites[0].Reverse && !RevPrimerSites[0].Reverse && fwdposition < revposition {
		startposition = revposition
		endposition = fwdposition
	}
	
	// work out what the pcr product will be
	Amplicon = oligos.DNAregion(TemplateSequence,startposition,endposition)
	
	// Make a mastermix
	mmxSample := mixer.Sample(MasterMix, MasterMixVolume)
		
	// pipette out to make mastermix
	mastermix := MixInto(OutPlate, OptionalWellPosition, mmxSample)
	
	// rest samples to zero
	samples := make([]*LHComponent, 0)
		
	// add primers
	
	if !PrimersalreadyAddedtoMasterMix {
	FwdPrimerSample := mixer.Sample(FwdPrimer, FwdPrimerVol)
	samples = append(samples, FwdPrimerSample)
	RevPrimerSample := mixer.Sample(RevPrimer, RevPrimerVol)
	samples = append(samples, RevPrimerSample)
	}
		
	// add template
	templateSample := mixer.Sample(Template, Templatevolume)
	samples = append(samples, templateSample)
	
	for j := range samples { 
	mastermix = Mix(mastermix, samples[j])
	}
	reaction := mastermix

	// this needs to go after an initial denaturation!
	if !PolymeraseAlreadyaddedtoMastermix {
	polySample := mixer.Sample(PCRPolymerase, PolymeraseVolume)
	
	reaction = Mix(reaction,polySample)
	}

	// thermocycle parameters called from enzyme lookup:
	polymerase := PCRPolymerase.CName

	polymeraseproperties, polymerasefound := enzymes.DNApolymerasetemps[polymerase]
	
	if !polymerasefound {
		validoptions := make([]string,0)
		for polymerasename, _ := range enzymes.DNApolymerasetemps{
			validoptions = append(validoptions,polymerasename)
			}
		
		Errorf("No Properties for %s found. Valid options are: %s", polymerase, strings.Join(validoptions,","))
	}

	var found bool

	ExtensionTemp, found = polymeraseproperties["extensiontemp"]
	if !found{
		Errorf("No extension temp found for polymerase %s",polymerase )
	}
	MeltingTemp, found = polymeraseproperties["meltingtemp"]
	if !found{
		Errorf("No melting temp found for polymerase %s",polymerase )
	}

	var err error

	ExtensionTime, err = enzymes.CalculateExtensionTime(PCRPolymerase, Amplicon) 
	
	if err != nil {
		Errorf("Can't calculate extension time of polymerase: %s",  err.Error())
	}


	// work out annealing temperature
	FwdPrimerMeltingTemp = oligos.BasicMeltingTemp(FwdPrimerSeq)
	
	RevPrimerMeltingTemp = oligos.BasicMeltingTemp(RevPrimerSeq)

	// check which primer has the lowest melting temperature
	lowest := math.Min(FwdPrimerMeltingTemp.SIValue(),RevPrimerMeltingTemp.SIValue())
	
	// start PCR AnnealingTempOffset degrees below lowest melting temp
	AnnealingTemp = wunit.NewTemperature(lowest - AnnealingTempOffset.SIValue(),"C")
	

	// initial Denaturation

	r1 := Incubate(reaction, MeltingTemp, InitDenaturationTime, false)
	
	for i:=0; i < NumberOfCycles; i++ {
		
		// Denature

	r1 = Incubate(r1, MeltingTemp, DenaturationTime, false)
	
		// Anneal
	r1 = Incubate(r1, AnnealingTemp, AnnealingTime, false)
		
		// Extend
	r1 = Incubate(r1, ExtensionTemp, ExtensionTime, false)
		
	}
		// Final Extension
	r1 = Incubate(r1, ExtensionTemp, FinalExtensionTime, false)
	

	// all done
	Reaction = r1
	
	Reaction.CName = ReactionName
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}

/*type Polymerase struct {
	LHComponent
	Rate_BPpers float64
	Fidelity_errorrate float64 // could dictate how many colonies are checked in validation!
	Extensiontemp Temperature
	Hotstart bool
	StockConcentration Concentration // this is normally in U?
	TargetConcentration Concentration
	// this is also a glycerol solution rather than a watersolution!
}
*/
