protocol Colony_PCR

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/enzymes"
)


// Input parameters for this protocol (data)
Parameters (
	// PCRprep parameters:
	ReactionVolume Volume
	FwdPrimerConc Concentration
	RevPrimerConc Concentration
	Additiveconc Concentration
	TargetpolymeraseConcentration Concentration
	Templatevolume Volume
	DNTPconc Concentration
	/*
	// let's be ambitious and try this as part of type polymerase Polymeraseconc Volume
	
	//Templatetype string  // e.g. colony, genomic, pure plasmid... will effect efficiency. We could get more sophisticated here later on... 
	//FullTemplatesequence string // better to use Sid's type system here after proof of concept
	//FullTemplatelength int	// clearly could be calculated from the sequence... Sid will have a method to do this already so check!
	//TargetTemplatesequence string // better to use Sid's type system here after proof of concept
	//TargetTemplatelengthinBP int
	*/
	// Reaction parameters: (could be a entered as thermocycle parameters type possibly?)
	Numberofcycles int 
	InitDenaturationtime Time
	Denaturationtime Time
	//Denaturationtemp Temperature
	Annealingtime Time
	AnnealingTemp Temperature // Should be calculated from primer and template binding
	Extensiontime Time // should be calculated from template length and polymerase rate
	Extensiontemp Temperature
	Finalextensiontime Time
)

// Data which is returned from this protocol, and data types
Data (
)


// Physical Inputs to this protocol with types
Inputs (
	FwdPrimer *wtype.LHComponent
	RevPrimer *wtype.LHComponent
	DNTPS *wtype.LHComponent
	PCRPolymerase *wtype.LHComponent
	Buffer *wtype.LHComponent
	Template *wtype.LHComponent
	Additives []*wtype.LHComponent // e.g. DMSO
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Reaction *wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	// Mix components
	samples := make([]*wtype.LHComponent, 0)
	bufferSample := mixer.SampleForTotalVolume(Buffer, ReactionVolume)
	samples = append(samples, bufferSample)
	templateSample := mixer.Sample(Template, Templatevolume)
	samples = append(samples, templateSample)
	dntpSample := mixer.SampleForConcentration(DNTPS, DNTPconc)
	samples = append(samples, dntpSample)
	FwdPrimerSample := mixer.SampleForConcentration(FwdPrimer, FwdPrimerConc)
	samples = append(samples, FwdPrimerSample)
	RevPrimerSample := mixer.SampleForConcentration(RevPrimer, RevPrimerConc)
	samples = append(samples, RevPrimerSample)

	for _, additive := range Additives {
		additiveSample := mixer.SampleForConcentration(additive, Additiveconc)
		samples = append(samples, additiveSample)
	}

	polySample := mixer.SampleForConcentration(PCRPolymerase, TargetpolymeraseConcentration)
	samples = append(samples, polySample)
	reaction := MixInto(OutPlate, "", samples...)

	// thermocycle parameters called from enzyme lookup:

	polymerase := PCRPolymerase.CName

	extensionTemp := enzymes.DNApolymerasetemps[polymerase]["extensiontemp"]
	meltingTemp := enzymes.DNApolymerasetemps[polymerase]["meltingtemp"]


	// initial Denaturation

	r1 := Incubate(reaction, meltingTemp, InitDenaturationtime, false)
	
	for i:=0; i < Numberofcycles; i++ {
		
		// Denature

	r1 = Incubate(r1, meltingTemp, Denaturationtime, false)
	
		// Anneal
	r1 = Incubate(r1, AnnealingTemp, Annealingtime, false)
	
	//extensiontime := TargetTemplatelengthinBP/PCRPolymerase.RateBPpers // we'll get type issues here so leave it out for now
	
		// Extend
	r1 = Incubate(r1, extensionTemp, Extensiontime, false)
		
	}
		// Final Extension
	r1 = Incubate(r1, extensionTemp, Finalextensiontime, false)
	

	// all done
	Reaction = r1
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
