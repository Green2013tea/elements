protocol AutoPCR_primerbind

import (
"github.com/antha-lang/antha/antha/anthalib/wtype"
"github.com/antha-lang/antha/microArch/factory"

)

// Input parameters for this protocol (data)
Parameters (
// PCRprep parameters
Projectname string
Reactiontotemplate map[string]string // e.g. ["left homology arm"]:"templatename"
Reactiontoprimerpair map[string][2]string // e.g. ["left homology arm"]:"fwdprimer","revprimer"
)

// Data which is returned from this protocol, and data types
Data (
	Error error
)


// Physical Inputs to this protocol with types
Inputs (
FwdPrimertype *wtype.LHComponent
RevPrimertype *wtype.LHComponent
Templatetype *wtype.LHComponent
Plate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
Reactions []*wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	var counter int
	
Reactions = make([]*wtype.LHComponent,0)
volumes := make([]wunit.Volume,0)
welllocations := make([]string,0)

for reactionname, templatename := range Reactiontotemplate {
	
	wellposition := Plate.AllWellPositions(wtype.BYCOLUMN)[counter]
	
		result := RunSteps(PCR_vol_mmx_primerbind,
               Parameters{
					Targetsequence: "TAATGACCCCAAGGGCGACACCCCCTAATTAGCCCGGGCGAAAGGCCCAGTCTTTCGACTGAGCCTTTCGTTTTATTTGATGCCTGGCAGTTCCCTACTCTCGCATGGGGAGTCCCCACACTACCATCGGCGCTACGGCGTTTCACTTCTGAGTTCGGCATGGGGTCAGGTGGGACCACCGCGCTACTGCCGCCAGGCAAACAAGGGGTGTTATGAGCCATATTCAGGTATAAATGGGCTCGCGATAATGTTCAGAATTGGTTAATTGGTTGTAACACTGACCCCTATTTGTTTATTTTTCTAAATACATTCAAATATGTATCCGCTCATGAGACAATAACCCTGATAAATGCTTCAATAATATTGAAAAAGGAAGAATATGAGCCATATTCAACGGGAAACGTCGAGGCCGCGATTAAATTCCAACATGGATGCTGATTTATATGGGTATAAATGGGCTCGCGATAATGTCGGGCAATCAGGTGCGACAATCTATCGCTTGTATGGGAAGCCCGATGCGCCAGAGTTGTTTCTGAAACATGGCAAAGGTAGCGTTGCCAATGATGTTACAGATGAGATGGTCAGACTAAACTGGCTGACGGAATTTATGCCACTTCCGACCATCAAGCATTTTATCCGTACTCCTGATGATGCATGGTTACTCACCACTGCGATCCCCGGAAAAACAGCGTTCCAGGTATTAGAAGAATATCCTGATTCAGGTGAAAATATTGTTGATGCGCTGGCAGTGTTCCTGCGCCGGTTGCACTCGATTCCTGTTTGTAATTGTCCTTTTAACAGCGATCGCGTATTTCGCCTCGCTCAGGCGCAATCACGAATGAATAACGGTTTGGTTGATGCGAGTGATTTTGATGACGAGCGTAATGGCTGGCCTGTTGAACAAGTCTGGAAAGAAATGCATAAACTTTTGCCATTCTCACCGGATTCAGTCGTCACTCATGGTGATTTCTCACTTGATAACCTTATTTTTGACGAGGGGAAATTAATAGGTTGTATTGATGTTGGACGAGTCGGAATCGCAGACCGATACCAGGATCTTGCCATCCTATGGAACTGCCTCGGTGAGTTTTCTCCTTCATTACAGAAACGGCTTTTTCAAAAATATGGTATTGATAATCCTGATATGAATAAATTGCAGTTTCATTTGATGCTCGATGAGTTTTTCTAAGCGGCGCGCCATCGAATGGCGCAAAACCTTTCGCGGTATGGCATGATAGCGCCCGGAAGAGAGTCAATTCAGGGTGGTGAATATGAAACCAGTAACGTTATACGATGTCGCAGAGTATGCCGGTGTCTCTTATCAGACCGTTTCCCGCGTGGTGAACCAGGCCAGCCACGTTTCTGCGAAAACGCGGGAAAAAGTGGAAGCGGCGATGGCGGAGCTGAATTACATTCCCAACCGCGTGGCACAACAACTGGCGGGCAAACAGTCGTTGCTGATTGGCGTTGCCACCTCCAGTCTGGCCCTGCACGCGCCGTCGCAAATTGTCGCGGCGATTAAATCTCGCGCCGATCAACTGGGTGCCAGCGTGGTGGTGTCGATGGTAGAACGAAGCGGCGTCGAAGCCTGTAAAGCGGCGGTGCACAATCTTCTCGCGCAACGCGTCAGTGGGCTGATCATTAACTATCCGCTGGATGACCAGGATGCCATTGCTGTGGAAGCTGCCTGCACTAATGTTCCGGCGTTATTTCTTGATGTCTCTGACCAGACACCCATCAACAGTATTATTTTCTCCCATGAGGACGGTACGCGACTGGGCGTGGAGCATCTGGTCGCATTGGGTCACCAGCAAATCGCGCTGTTAGCGGGCCCATTAAGTTCTGTCTCGGCGCGTCTGCGTCTGGCTGGCTGGCATAAATATCTCACTCGCAATCAAATTCAGCCGATAGCGGAACGGGAAGGCGACTGGAGTGCCATGTCCGGTTTTCAACAAACCATGCAAATGCTGAATGAGGGCATCGTTCCCACTGCGATGCTGGTTGCCAACGATCAGATGGCGCTGGGCGCAATGCGCGCCATTACCGAGTCCGGGCTGCGCGTTGGTGCGGATATCTCGGTAGTGGGATACGACGATACCGAAGATAGCTCATGTTATATCCCGCCGTTAACCACCATCAAACAGGATTTTCGCCTGCTGGGGCAAACCAGCGTGGACCGCTTGCTGCAACTCTCTCAGGGCCAGGCGGTGAAGGGCAATCAGCTGTTGCCAGTCTCACTGGTGAAAAGAAAAACCACCCTGGCGCCCAATACGCAAACCGCCTCTCCCCGCGCGTTGGCCGATTCATTAATGCAGCTGGCACGACAGGTTTCCCGACTGGAAAGCGGGCAGTGACTCATGACCAAAATCCCTTAACGTGAGTTACGCGCGCGTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCGCGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTACCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTTCTTCTAGTGTAGCCGTAGTTAGCCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACCAGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAGGCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAACTGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCCGGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTATAGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCCTATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTTCTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGCCGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGGCGAGAGTAGGGAACTGCCAGGCATCAAACTAAGCAGAAGGCCCCTGACGGATGGCCTTTTTGCGTTTCTACAAACTCTTTCTGTGTTGTAAAACGACGGCCAGTCTTAAGCTCGGGCCCCCTGGGCGGTTCTGATAACGAGTAATCGTTAATCCGCAAATAACGTAAAAACCCGCTTCGGCGGGTTTTTTTATGGGGGGAGTTTAGGGAAAGAGCATTTGTCAGAATATTTAAGGGCGCCTGTCACTTTGCTTGATATATGAGAATTATTTAACCTTATAAATGAGAAAAAAGCAACGCACTTTAAATAAGATACGTTGCTTTTTCGATTGATGAACACCTATAATTAAACTATTCATCTATTATTTATGATTTTTTGTATATACAATATTTCTAGTTTGTTAAAGAGAATTAAGAAAATAAATCTCGAAAATAATAAAGGGAAAATCAGTTTTTGATATCAAAATTATACATGTCAACGATAATACAAAATATAATACAAACTATAAGATGTTATCAGTATTTATTATGCATTTAGAATAAATTTTGTGTCGGCTCTTCATGTCCACAATTCAGCAAATTGTGAACATCATCACGTTCATCTTTCCCTGGTTGCCAATGGCCCATTTTCCTGTCAGTAACGAGAAGGTCGCGTATTCAGGCGCTTTTTAGACTGGTCGTAATGAATACTGAATTCATTAAAGAGGAGAAAGGTCATATGAATAGCCTGATTAAAGAGAATATGCACATGAAGCTGTACATGGAAGGCACGGTGAATAACCACCACTTCAAATGCACCAGCGAGGGTGAGGGTAAACCGTATGAAGGCACCCAAACGATGCGTATCAAAGTTGTTGAGGGTGGCCCGTTGCCGTTTGCGTTCGACATTTTAGCGACGAGCTTTATGTATGGCTCTCGTACGTTTATCAAGTACCCGAAGGGTATTCCGGACTTTTTCAAACAATCTTTTCCAGAGGGTTTCACCTGGGAGCGCGTGACTCGCTACGAAGATGGCGGCGTCGTGACCGCAACGCAGGATACCTCCCTGGAAGATGGCTGCCTGGTCTACCACGTTCAGGTCCGTGGTGTCAATTTCCCGAGCAATGGTCCGGTTATGCAGAAGAAAACCCTGGGTTGGGAACCGAACACCGAGATGTTGTATCCTGCAGATGGTGGCCTGGAAGGTCGCAGCGACATGGCATTGAAACTGGTCGGTGGCGGCCATCTGAGCTGTAGCTTCGTGACCACGTATCGTTCGAAGAAAACGGTCGGTAACATCAAAATGCCGGGTATTCACGCGGTTGACCACCGTCTGGTGCGCATTAAAGAAGCCGACAAAGAGACTTACGTGGAGCAACATGAAGTAGCCGTTGCGAAATTTGCTGGTTTGGGCGGTGGTATGGACGAACTGTACAAAGCTTCCAGGCATCAAATAAAACGAAAGGCTCAGTCGAAAGACTGGGCCTTTCGTTTTATCTGTTGTTTGTCGGTGAACGCTCTCTACTAGAGTCACACTGGCTCACCTTCGGGTGGGCCTTTCTGCGTTTATAGGTAGAAGAGC",
					FwdPrimerSeq: "TCAGTAACGAGAAGGTCGCGTATTCAGGCGCTTT",
					RevPrimerSeq: "ATCAAATAAAACGAAAGGCTCAGTCGAAAGACTGGGCCTT",
				    FwdPrimerName: Reactiontoprimerpair[reactionname][0],
				    RevPrimerName: Reactiontoprimerpair[reactionname][1],
				    TemplateName: templatename,
				    ReactionName: reactionname,
				          FwdPrimerVol: wunit.NewVolume(1,"ul"),
				          RevPrimerVol: wunit.NewVolume(1,"ul"),
				          Templatevolume: wunit.NewVolume(1,"ul"),
				          PolymeraseVolume: wunit.NewVolume(1,"ul"),
				          Numberofcycles: 30 ,
				          InitDenaturationtime: wunit.NewTime(30,"s"),
				          Denaturationtime: wunit.NewTime(5,"s"),
				          Annealingtime: wunit.NewTime(10,"s"),
				          AnnealingTemp: wunit.NewTemperature(72,"C"), // Should be calculated from primer and template binding
				          Extensiontime: wunit.NewTime(60,"s"), // should be calculated from template length and polymerase rate
				          Finalextensiontime: wunit.NewTime(180,"s"),
						WellPosition: wellposition,
				                }, Inputs{
				          FwdPrimer:FwdPrimertype,
				          RevPrimer: RevPrimertype,
				     
				          PCRPolymerase:factory.GetComponentByType("Q5Polymerase"),
				        
				          Template: Templatetype,
				         
				          OutPlate: Plate,
                        
                })


    Reactions = append(Reactions, result.Outputs.Reaction)
    volumes = append(volumes,result.Outputs.Reaction.Volume())
	welllocations = append(welllocations,wellposition)
	counter++
	
    }
	
	Error = wtype.ExportPlateCSV(Projectname+".csv", Plate,Projectname+"outputPlate", welllocations, Reactions, volumes) 
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}