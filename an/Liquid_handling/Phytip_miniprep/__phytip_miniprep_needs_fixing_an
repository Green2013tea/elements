// 
protocol Phytip_miniprep
import (
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Liquidclasses"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Labware"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/devices"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/UnitOperations"
	//"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	//"github.com/antha-lang/antha/antha/anthalib/wunit"
	"time"
)
Parameters (
    //Cellpelletmass Mass
	
	Resuspensionstep UnitOperations.Chromstep
	Lysisstep UnitOperations.Chromstep
	Precipitationstep UnitOperations.Chromstep
	Equilibrationstep UnitOperations.Chromstep
	Airstep UnitOperations.Chromstep
	Capturestep UnitOperations.Chromstep
	Washsteps  []UnitOperations.Chromstep
	Elutionstep UnitOperations.Chromstep
	
	Blottime time.Duration
	Blotcycles int
	
	Vacuum bool
	Vacuumstrength float64 //Torr
	Drytime time.Duration
	
	// cubesensor streams to work out drying time:
	/*Pa float64 // in pascals atmospheric pressure of moist air (Pa) 100mBar = 1 pa
	Temp float64 // in Kelvin
	Relativehumidity float64 // Percentage // density water vapor (kg/m3)
	*/
	//Time time.Duration //float64// time 
	
	
	/*
	Parameters before refactoring into Chromstep structs

	RBvolume Volume // 150ul
	RBflowrate Rate
	RBpause Time // seconds
	RBcycles int
	
	LBvolume Volume
	LBflowrate Rate
	LBpause Time
	LBcycles int
	
	PBvolume Volume
	PBflowrate Rate
	PBpause Time
	PBcycles int
	
	Equilibrationvolume Volume
	Equilibrationflowrate Rate
	Equilibrationpause Time
	Equilibrationcycles int
	
	Airdispensevolume Volume
	Airdispenseflowrate Rate
	Airdispensepause Time
	Airdispensecycles int
	
	
	
	Airaspiratevolume Volume
	Airaspirateflowrate Rate
	Airaspiratepause Time
	Airaspiratecylces int
	
	Capturevoume Volume
	Captureflowrate Rate
	Capturepause Time
	Capturecycles int
	
	Washbuffervolume [] Volume
	Washbufferflowrate [] Rate
	Washbufferpause [] Time
	Washbuffercycles [] int
	
	
	
	Elutionbuffervolume Volume
	Elutionflowrate Rate
	Elutionpause Time
	Elutioncycles int
	
	*/
	//or 
	
)
Data (
	/* PlasmidConc Concentration
	Storagelocation Location
	Storageconditions StorageHistory
	Plasmidbuffer Composition */ // is this all inferred from a PLasmid solution  type anyway?
)
Inputs (
	Phytips UnitOperations.Column //
	Tips UnitOperations.Column // wtype.LHTip
	Cellpellet *wtype.LHComponent //UnitOperations.Pellet // wrong type?
	
	//RB *wtype.LHComponent //Watersolution
	//LB *wtype.LHComponent //Watersolution
	//PB *wtype.LHComponent //Watersolution
	//Water *wtype.LHComponent //Watersolution // equilibration buffer
	//Air *wtype.LHComponent //Gas
	//Washbuffer []*wtype.LHComponent //Watersolution
	//Elutionbuffer *wtype.LHComponent //Watersolution
)
Outputs (
	PlasmidDNAsolution *wtype.LHComponent //Solution //PlasmidSolution
)
Requirements {
}
Setup {
} 
Steps {
	resuspension,_ := UnitOperations.Resuspend(Cellpellet, Resuspensionstep,Tips)
	lysate,_ := UnitOperations.Chromatography(resuspension,Lysisstep,Tips)
	precipitate,_ := UnitOperations.Chromatography(lysate,Precipitationstep,Tips)
	
	_,columnready := UnitOperations.Chromatography(Equilibrationstep.Buffer, Equilibrationstep, Phytips)
	
	
	_,readyforcapture := UnitOperations.Chromatography(Airstep.Buffer,Airstep,columnready)
	capture,readyforcapture := UnitOperations.Chromatography(precipitate, Capturestep, readyforcapture)
	
	for _, washstep := range Washsteps {
	_, readyforcapture = UnitOperations.Chromatography(capture,washstep,readyforcapture)
	}
	readyfordrying := UnitOperations.Blot(readyforcapture,Blotcycles,Blottime)
		
	/*if Vacuum == true {
		drytips := UnitOperations.Dry(Tips,Drytime,Vacuumstrength)
		
		
		//parameters required for evaporation calculator
		Liquid := Washsteps[0].Pipetstep.Name //ethanol?
		// lookup properties via liquidclasses package to workout evaporation time using Evaporationrate element?
		
		
		//Platetype := Phytips.tip //.surfacearea? labware.phytip.surfacearea?
		Volumeperwell := (Washsteps[0].Pipetstep.Volume.SIValue() / 10) // assume max 10% residual volume for now??
		
		drytimerequired := Evaporation.Estimatedevaporationtime(Airvelocity, Liquid, Platetype, Volumeperwell)
	
	
	} else {*/drytips := UnitOperations.Dry(readyfordrying,Drytime, Vacuumstrength)//}
		
	PlasmidDNAsolution,_ = UnitOperations.Chromatography(Elutionstep.Buffer,Elutionstep, drytips)
	
	
}
Analysis {
}
Validation {
}
