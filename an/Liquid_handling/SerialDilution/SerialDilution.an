// Protocol to make a serial dilution series from a solution and diluent
protocol SerialDilution

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"	
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)


// Input parameters for this protocol (data)
Parameters (
	TotalVolumeperDilution Volume
	DilutionFactor  int
	NumberOfDilutions int
)

// Data which is returned from this protocol, and data types
Data (
	
)


// Physical Inputs to this protocol with types
Inputs (
	Solution *wtype.LHComponent 
	Diluent *wtype.LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Dilutions []*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	dilutions := make([]*wtype.LHComponent,0)

	var aliquot *wtype.LHComponent
	
	// work out diluent volume to add	
	diluentVolume := wunit.NewVolume(TotalVolumeperDilution.RawValue()-(TotalVolumeperDilution.RawValue()/float64(DilutionFactor)),TotalVolumeperDilution.Unit().PrefixedSymbol())	
	
	// sample diluent
	diluentSample := mixer.Sample(Diluent,diluentVolume)
		
	// Ensure liquid type set to Pre and Post Mix 
	Solution.Type = wtype.LTNeedToMix
	
	// calculate solution volume
	solutionVolume := wunit.NewVolume((TotalVolumeperDilution.RawValue()/float64(DilutionFactor)),TotalVolumeperDilution.Unit().PrefixedSymbol())
	
	// sample solution
	solutionSample := mixer.Sample(Solution,solutionVolume)
	
	// mix both samples to OutPlate
	aliquot = MixTo(OutPlate.Type,"", 1,diluentSample, solutionSample)

	// add to dilutions array
	dilutions = append(dilutions,aliquot)
	
	// loop through NumberOfDilutions until all serial dilutions are made
	for k := 1; k < NumberOfDilutions; k++ {
		
		// take next sample of diluent
		nextdiluentSample := mixer.Sample(Diluent, diluentVolume)
		
		// Ensure liquid type set to Pre and Post Mix 
		aliquot.Type = wtype.LTNeedToMix
		
		// sample from previous dilution sample
		nextSample := mixer.Sample(aliquot, solutionVolume)
		
		// Mix sample into nextdiluent sample
		nextaliquot := Mix(nextdiluentSample,nextSample)
		
		// add to dilutions array 
		dilutions = append(dilutions,nextaliquot)
		// reset aliquot
		aliquot = nextaliquot
		}
		
// export as Output
Dilutions = dilutions 

}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

