// Protocol to make a serial dilution series from a solution and diluent
protocol SerialDilution


import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"	
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)


// Input parameters for this protocol (data)
Parameters (
	TotalVolumeperDilution Volume
	DilutionFactor  int // e.g. 10 would take 1 part solution to 9 parts diluent for each dilution 
	NumberOfDilutions int
	ByRow bool
	WellsAlreadyUsed int
)

// Data which is returned from this protocol, and data types
Data (
	WellsUsed int
)


// Physical Inputs to this protocol with types
Inputs (
	Solution *LHComponent 
	Diluent *LHComponent
	OutPlate *LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Dilutions []*LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	// This code allows the user to specify how the Serial Dilutions should be made in order, by row or by column.
	
	allwellpositions := OutPlate.AllWellPositions(ByRow)
	var counter int = WellsAlreadyUsed

	dilutions := make([]*LHComponent,0)

	var aliquot *LHComponent
	
	// calculate solution volume
	
	// create copy of TotalVolumeperDilution
	solutionVolume := (wunit.CopyVolume(TotalVolumeperDilution))
	
	// use divideby method
	solutionVolume.DivideBy(float64(DilutionFactor)) 
	
	// use same approach to work out diluent volume to add	
	diluentVolume := (wunit.CopyVolume(TotalVolumeperDilution))
	
	// this time using the substract method
	diluentVolume.Subtract(solutionVolume)	
	
	// sample diluent
	diluentSample := mixer.Sample(Diluent,diluentVolume)
		
	// Ensure liquid type set to Pre and Post Mix 
	Solution.Type = wtype.LTNeedToMix
		// check if the enzyme is specified and if not mix the 
		
	
	
	// sample solution
	solutionSample := mixer.Sample(Solution,solutionVolume)
	
	// mix both diluent and sample to OutPlate
	aliquot = MixNamed(OutPlate.Type, allwellpositions[counter], "DilutionPlate", diluentSample, solutionSample)

	// add to dilutions array
	dilutions = append(dilutions,aliquot)
	
	counter++
	// loop through NumberOfDilutions until all serial dilutions are made
	for k := 1; k < NumberOfDilutions; k++ {
		
		// take next sample of diluent
		nextDiluentSample := mixer.Sample(Diluent, diluentVolume)
		
		// Ensure liquid type set to Pre and Post Mix 
		aliquot.Type = wtype.LTNeedToMix
		
		// sample from previous dilution sample
		nextSample := mixer.Sample(aliquot, solutionVolume)
		
	
		
		// Mix sample into nextdiluent sample
		nextaliquot := MixNamed(OutPlate.Type, allwellpositions[counter], "DilutionPlate", nextDiluentSample, nextSample)
		
		// add to dilutions array 
		dilutions = append(dilutions,nextaliquot)
		// reset aliquot
		aliquot = nextaliquot
		counter++
		}
		
// export as Output
Dilutions = dilutions 

// Output the number of wells that have been used on this plate
WellsUsed = counter

}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

