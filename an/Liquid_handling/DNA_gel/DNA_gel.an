// This protocol will load DNA samples on an E-GEL for DNA analysis. The loading dye can also be added to the samples if selected.
//A global volume will be loaded for all samples and can take input from other protocols which exports an array of LHComponents.
protocol DNA_gel

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"fmt"

)
// Input parameters for this protocol (data)
Parameters (
	GelLoadingMixingPolicy string //default is Load policy but can be overriden by specifying here (i.e. for viscous samples requiring slow dispensing)
	LadderVolume Volume //specify the volume of DNA ladder to add
	LoadingDyeInSample bool //select true if DNA samples already contain Loading Dye. If this is selected, the step to add loading dye will be skipped
	LoadingDyeMixingPolicy string //default is NeedToMix but can be overriden by specifying here (i.e. for hard to mix reaction samples)
	LoadingDyeVolume Volume //specify the volume of loading dye to add to each sample
	OptimisePlateUsage bool //If selected, loading dye will be mixed with sample in input plate (instead of mixing in a seperate plate)
	Replicates int //define number of technical replicates
	SampleVolume Volume //specify the volume of the DNA sample
)

// Data which is returned from this protocol, and data types
Data (
	Errors []string //error reporting
)


// Physical Inputs to this protocol with types
Inputs (
	DNAGel *wtype.LHPlate  // E-GEL type. (Current valid options are the 48 and 96 well precast E-GELs from Thermo-Fisher)
	Ladder *wtype.LHComponent //DNA ladder
	LoadingDye *wtype.LHComponent //loading dye to mix with samples
	MixPlate *wtype.LHPlate// plate to mix samples if required
	Reactions []*wtype.LHComponent //Specifies the samples to load. These may be set here using the NewLHComponents element or fed in from a previous element such as AutoPCR_multi.
	Water	*wtype.LHComponent //water

)

// Physical outputs from this protocol with types
Outputs (
	LoadedSamples []*wtype.LHComponent //samples outputted as an array which can be wired into downstream protocols

)

// No special requirements on inputs
Requirements {

}

// Condititions run on startup
// Including configuring an controls required, and the blocking level needed
// for them (in this case, per plate of samples processed)
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	//set up some default values
	var defaultGelLoadingMixPolicy string = "load"
	var defaultLoadingDyeMixingPolicy string = "NeedToMix"

	//set up some arrays to fill and LHComponent variables for the DNA samples
	var loadedSamples []*wtype.LHComponent

	//setup variable for error reporting
	var err error

	//get well positions of DNA Gel from plate library ensuring the list is by row rather than by column
	var wells []string = DNAGel.AllWellPositions(wtype.BYROW)

	//setup liquid handling component variables
	var loadingMix *wtype.LHComponent
	var loadedSample *wtype.LHComponent

	//begin counter at first well position as E-GEL must be run upside down
	var counter int = len(wells)-1

	//assign water to specific liquid handling load type
	Water.Type = wtype.LTloadwater

	//get info for total volume of well
	totalWellVolume := wunit.CopyVolume(wunit.NewVolume(DNAGel.Welltype.MaxVol, "ul"))

	//check if replicates set to 1 or greater
	if Replicates == 0 {
		Replicates = 1
		err = fmt.Errorf("Invalid number of replicates so setting Replicates to 1")
		Errors = append(Errors, err.Error())
	}

		//calculate and loop through specified number of replicates
		for j:=0;j< Replicates;j++{

				//range through the reactions input array and perform specified actions
				for i := range Reactions {

						//update position to correspond to counter
						position := wells[counter]

						//get well coordinates from correct position
						wellcoords := wtype.MakeWellCoordsA1(position)

						//if it is the last column, add a ladder sample
						if wellcoords.X == DNAGel.WlsX -1 {

							//attribute specified mixinpolicy to the DNA ladder
							Ladder.Type, err = wtype.LiquidTypeFromString(GelLoadingMixingPolicy)
							if err != nil {
										err = fmt.Errorf(err.Error())
										Errors = append(Errors, err.Error())
										Ladder.Type, _ = wtype.LiquidTypeFromString(defaultGelLoadingMixPolicy)
								}

							//work out how much water to add to ladded
							correctedWaterVolume := wunit.SubtractVolumes(totalWellVolume, []wunit.Volume{LadderVolume})

							//perform liquid handling for addiiton of ladder sample
							water := MixInto(DNAGel,position,mixer.Sample(Water,correctedWaterVolume))
							ladderSample := Mix(water,mixer.Sample(Ladder,LadderVolume))

							//add ladder to array of loaded samples
							loadedSamples = append(loadedSamples,ladderSample)

							//decrease counter by 1, as pipetting Gel backwards
							counter--
						}

						// refresh position in case ladder was added
						position = wells[counter]

						sampletotest := Reactions[i]



						// load sample

						// add loading dye if necessary
							if !LoadingDyeInSample {

									//attribute specified mixingpolicy to the LoadingDye
									if LoadingDyeMixingPolicy == "" {
										LoadingDyeMixingPolicy = defaultLoadingDyeMixingPolicy
										err = fmt.Errorf("No liquid policy specified for LoadingDyeMixingPolicy so assigning default mixing policy for this protocol: %s", defaultLoadingDyeMixingPolicy)
										Errors = append(Errors, err.Error())
										}
									LoadingDye.Type, err = wtype.LiquidTypeFromString(LoadingDyeMixingPolicy)
									if err != nil{
											err = fmt.Errorf(err.Error())
											Errors = append(Errors, err.Error())
										}

									//perform liquid handling for addiiton and mixing of the loading dye
									var loadingMixSolution *wtype.LHComponent

									// determine if OptimisePlateUsage selected and if so, perform mix on input plate, else perform mix on seperate plate
											if OptimisePlateUsage ==true {
														loadingMixSolution = Mix(mixer.Sample(sampletotest, SampleVolume))
														loadingMixSolution = Mix(loadingMixSolution,mixer.Sample(LoadingDye,LoadingDyeVolume))
											} else {
														loadingMixSolution = MixInto(MixPlate,"", mixer.Sample(sampletotest,SampleVolume),mixer.Sample(LoadingDye,LoadingDyeVolume))
														}
									//assign newly mixed componenents to the loadin
									loadingMix = loadingMixSolution
							   } else {
											loadingMix = sampletotest
											}


							//attribute specified mixingpolicy to the LoadingDye
							if GelLoadingMixingPolicy == "" {
								GelLoadingMixingPolicy = defaultGelLoadingMixPolicy
								err = fmt.Errorf("No liquid policy specified for GelLoadingMixingPolicy so assigning default mixing policy for this protocol: %s", defaultGelLoadingMixPolicy)
								Errors = append(Errors, err.Error())
								}
							loadingMix.Type, err = wtype.LiquidTypeFromString(defaultGelLoadingMixPolicy)
							if err != nil {
								err  = fmt.Errorf(err.Error())
								Errors = append(Errors, err.Error())
							}

							//get total volume per well including sample and loadingdye
							sampleAndLoadingDyeVolume := wunit.AddVolumes([]wunit.Volume{SampleVolume, LoadingDyeVolume})

							//work out how much water to add
							waterVolume := wunit.SubtractVolumes(totalWellVolume,[]wunit.Volume{sampleAndLoadingDyeVolume})

							//detect if the volumes are correct, if not then reprt
							if waterVolume.LessThan(wunit.NewVolume(0.0,"ul"))  {
								Errorf("The total volume of sample and loading dye (%s) exceeds the maximum well capacity of the current output plate (%s), please rectify", sampleAndLoadingDyeVolume, totalWellVolume)
								Errors = append(Errors, err.Error())
							}

							//sample water at specified water volume
							waterSample := mixer.Sample(Water,waterVolume)

							//load the DNA samples (either mixed with loading dye or pre-mixed) to the E-GEL
							waterSample = MixInto(DNAGel,position,waterSample)

							//transfer sample plus laoding dye to Gel
							loadedSample = Mix(waterSample,mixer.Sample(loadingMix,sampleAndLoadingDyeVolume))

							//add the loaded samples to the loadedSamples array
							loadedSamples = append(loadedSamples,loadedSample)


							//decrease counter by 1 as loading the E-Gel backwards becuase of position constraints
							counter--
							}

				//update output variable LoadedSamples with the output of the protocol
				LoadedSamples = loadedSamples
}
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {

}
