// Protocol Wash performs a wash step
protocol Wash

// Place golang packages to import here
import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Parameters to this protocol
Parameters (
	WashVolume Volume
	NumberOfWashes int
	WashMixing bool
	IncubationBetweenWash bool
	IncubationTime Time
	IncubationTemperature Temperature
)

// Output data of this protocol
Data (
	Errors error
)

// Physical inputs to this protocol
Inputs (
	SamplesToWash []*LHComponent
	SamplesPlate *LHPlate
	WashBuffer *LHComponent
	WastePlate *LHPlate
	WashPlate *LHPlate
)

// Physical outputs to this protocol
Outputs (
	ProcessedSamples []*LHComponent
	WasteBuffer []*LHComponent
)

// Conditions to run on startup
Setup {

}

// The core process for this protocol. These steps are executed for each input.
Steps {

	//setup some variables for use during the protocol
	var samples []*LHComponent
	var err error
	var mixPolicy PolicyName

	var wastedBufferFromSamples []*LHComponent

	//determine if WashMixing is selected, and if so, assign LHPolicy to PostMix
	if WashMixing {
		mixPolicy = "PostMix"
	} else {
		mixPolicy = "DoNotMix"
	}

	//get plate info from input plate and was
	var samplesWells []string = SamplesPlate.AllWellPositions(wtype.BYCOLUMN)

	//loop through up to desired number of washes
	for j := 0; j < NumberOfWashes; j++ {

		//duplicate washbuffer sample
		refreshWashBuffer := WashBuffer.Dup()
		WashPlate.Welltype.Add(refreshWashBuffer)

		//range through the input samples and add wash buffer to each
		for i, _ := range SamplesToWash {

			//sample washbuffer at specified volume
			washBufferSample := mixer.Sample(refreshWashBuffer, WashVolume)

			//assign LHpolicy to wash sample (PostMix or NeedToMix)
			washBufferSample.Type, err = wtype.LiquidTypeFromString(mixPolicy)

			//update position to correspond to counter
			position := samplesWells[i]

			//add wash buffer into samples
			washSamples := MixInto(SamplesPlate, position, washBufferSample)

			//add wash solutions to slice for subsequent removal
			samples = append(samples, washSamples)

		}

		//range through slice of washe solutions from previous loop to remove
		for k, _ := range samples {

			//determine volume to be removed by adding WashVolume and adding 20ul excess
			newWashSolutionVolume := wunit.AddVolumes([]Volume{WashVolume, wunit.NewVolume(20, "ul")})

			//position := samplesWells[k]

			//remove wash buffer at updated volume
			washBufferRemoval := mixer.Sample(samples[k], newWashSolutionVolume)

			wastedBufferFromSamples = append(wastedBufferFromSamples, washBufferRemoval)

		}

		//transfer used wash buffer to WastePlate
		wasteDisposal := MixInto(WastePlate, "A1", wastedBufferFromSamples...)

		//setup slice to add wasted wash buffer
		var wastedBuffer []*LHComponent

		//add wasted wash buffer to slice
		wastedBuffer = append(wastedBuffer, wasteDisposal)

		//update outputs
		WasteBuffer = wastedBuffer
	}

	//update outputs
	Errors = err
	ProcessedSamples = samples

}

// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
