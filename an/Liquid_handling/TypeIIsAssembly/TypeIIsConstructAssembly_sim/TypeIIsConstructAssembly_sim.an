// Example protocol of performing an assembly simulation prior to performing 
// physical construct assembly if the siulation passes

protocol TypeIISConstructAssembly_sim

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"fmt"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/enzymes"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/sequences"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Inventory"
)

// Input parameters for this protocol (data)
Parameters (
	Constructname 				string
	
	ReactionVolume 				Volume
	PartVols 					[]Volume
	PartConcs					[]Concentration
	Partsinorder				[]string
	VectorVol 					Volume
	VectorConcentration		Concentration
	BufferVol 					Volume
	AtpVol 						Volume
	ReVol 						Volume
	LigVol	 					Volume

	ReactionTemp 				Temperature
	ReactionTime 				Time
	InactivationTemp 			Temperature
	InactivationTime 			Time
	
	Vectordata 					string
)

// Physical Inputs to this protocol with types
Inputs (
	Parts 				[]*wtype.LHComponent
	Vector 				*wtype.LHComponent
	RestrictionEnzyme 	*wtype.LHComponent
	Buffer 				*wtype.LHComponent
	Water  				*wtype.LHComponent
	Ligase 				*wtype.LHComponent
	Atp 				*wtype.LHComponent
	OutPlate 			*wtype.LHPlate
	InPlate 			*wtype.LHPlate
)


// Physical outputs from this protocol with types
Outputs (
	Reaction *wtype.LHComponent
)

// Data which is returned from this protocol, and data types
Data (
	Status string
	
	Simulationpass bool
	Molesperpart []float64
	MolarratiotoVector []float64
	NewDNASequence wtype.DNASequence
	Sitesfound []enzymes.Restrictionsites
)
// Input Requirement specification
Requirements {
	
	
}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	// Check that assembly is feasible by simulating assembly of the sequences with the chosen enzyme
	partsinorder := make([]wtype.DNASequence,0)
	
	for _, part := range Partsinorder {
	partDNA := Inventory.Partslist()[part]
	partsinorder = append(partsinorder,partDNA)
	}
	
	vectordata := Inventory.Partslist()[Vectordata]
	assembly := enzymes.Assemblyparameters{Constructname, RestrictionEnzyme.CName,vectordata,partsinorder}
	status,numberofassemblies,sitesfound,newDNASequence,_ := enzymes.Assemblysimulator(assembly)
	
	NewDNASequence = newDNASequence
	Sitesfound = sitesfound
	
	if status == "Yay! this should work" && numberofassemblies == 1 {
		
		Simulationpass = true
	}	
	// Monitor molar ratios of parts for possible troubleshooting / success correlation
	
		molesofeachdnaelement := make ([]float64,0)
		molarratios := make ([]float64,0)

		vector_mw := sequences.MassDNA(vectordata.Seq,false,true)
		vector_moles := sequences.Moles(VectorConcentration,vector_mw,VectorVol)
		molesofeachdnaelement = append(molesofeachdnaelement,vector_moles)
		
		molarratios = append(molarratios,(vector_moles/vector_moles))

 		var part_mw float64
		var part_moles float64
		
	for i := 0; i < len(Partsinorder);i++ {
       
		part_mw = sequences.MassDNA(partsinorder[i].Seq,false,true)
		part_moles = sequences.Moles(PartConcs[i],part_mw,PartVols[i])
               
		molesofeachdnaelement = append(molesofeachdnaelement,part_moles)
		molarratios = append(molarratios,(part_moles/vector_moles))
	}
		
		Molesperpart = molesofeachdnaelement
		MolarratiotoVector = molarratios 
		
	
	// Print status
	Status = fmt.Sprintln(
		"Simulationpass=", Simulationpass,
		"Molesperpart", Molesperpart,
		"MolarratiotoVector", MolarratiotoVector,
		"NewDNASequence",NewDNASequence,
		"Sitesfound",Sitesfound,
		)
		
	if Simulationpass == true {
	
	// Now Perform the physical assembly
	samples := make([]*wtype.LHComponent, 0)
	waterSample := mixer.SampleForTotalVolume(Water, ReactionVolume)
	samples = append(samples, waterSample)

	bufferSample := mixer.Sample(Buffer, BufferVol)
	samples = append(samples, bufferSample)

	atpSample := mixer.Sample(Atp, AtpVol)
	samples = append(samples, atpSample)

	//vectorSample := mixer.Sample(Vector, VectorVol)
	vectorSample := mixer.Sample(Vector, VectorVol)
	samples = append(samples, vectorSample)

	for k, part := range Parts {
		fmt.Println("creating dna part num ", k, " comp ", part.CName, " renamed to ", Partsinorder[k], " vol ", PartVols[k])
		partSample := mixer.Sample(part, PartVols[k])
		partSample.CName = Partsinorder[k]
		samples = append(samples, partSample)
	}

	reSample := mixer.Sample(RestrictionEnzyme, ReVol)
	samples = append(samples, reSample)

	ligSample := mixer.Sample(Ligase, LigVol)
	samples = append(samples, ligSample)

	// incubate the reaction mixture
	out1 := Incubate(MixInto(OutPlate,"", samples...), ReactionTemp, ReactionTime, false)
	// inactivate
	Reaction = Incubate(out1, InactivationTemp, InactivationTime, false)
}

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
/*
type Mole struct {
	number float64
}*/
