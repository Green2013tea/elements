// Assemble multiple assemblies using TypeIIs construct assembly
protocol MakeAssemblies

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"fmt"
)

Parameters (
	ReactionVolume 		Volume     // Reaction volume
	PartVols 		[][]Volume // Volumes corresponding to input parts
	PartNames		[][]string // Names corresonding to input parts
	VectorVol 		Volume     // Vector volume
	BufferVol 		Volume     // Buffer volume
	AtpVol 			Volume     // ATP volume
	ReVol 			Volume     // Restriction enzyme volume
	LigVol	 		Volume     // Ligase volume

	ReactionTemp 		Temperature // Reaction temperature
	ReactionTime 		Time        // Reaction time
	InactivationTemp	Temperature // Inactivation temperature
	InactivationTime	Time        // Inactivation time

	OutputReactionName	string      // Prefix for reaction names
)

Inputs (
	Parts 			[][]*wtype.LHComponent // Input parts, one per assembly
	Vector 			*wtype.LHComponent     // Vector to use
	RestrictionEnzyme 	*wtype.LHComponent     // Restriction enzyme to use
	Buffer 			*wtype.LHComponent     // Buffer to use
	Water  			*wtype.LHComponent     // Water to use
	Ligase 			*wtype.LHComponent     // Ligase to use
	Atp 			*wtype.LHComponent     // ATP to use
	OutPlate 		*wtype.LHPlate         // Output plate
	InPlate 		*wtype.LHPlate         // Input plate 
)

Outputs (
	Reactions []*wtype.LHComponent      // List of assembled parts
)

Setup {}

Steps {
	for k := range Parts {
		result := RunSteps(TypeIISConstructAssembly, 
                Parameters{
                	ReactionVolume: ReactionVolume,
                        PartVols: PartVols[k],
                        PartNames: PartNames[k],
                        VectorVol: VectorVol,
                        BufferVol: BufferVol,
                        AtpVol: AtpVol,
                        ReVol: ReVol,
                        LigVol: LigVol,
                        ReactionTemp: ReactionTemp,
                        ReactionTime: ReactionTime,
                        OutputReactionName: fmt.Sprintf("%s%d", OutputReactionName, k),
                }, Inputs{
                        Parts: Parts[k],
                        Vector: Vector,
                        RestrictionEnzyme: RestrictionEnzyme,
                        Buffer: Buffer,
                        Water: Water,
                        Ligase: Ligase,
                        Atp: Atp,
                        OutPlate: OutPlate,
                        InPlate: InPlate,
                })
		Reactions = append(Reactions, result.Outputs.Reaction)
        }
}

Analysis { }

Validation { }
