// Protocol for resuspending freeze dried DNA with a diluent
protocol PairOligos_multiple

// we need to import the wtype package to use the LHComponent type
// the mixer package is required to use the Sample function
import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	
)


// Input parameters for this protocol (data)
Parameters (
	PartConcentrations map[string]Concentration
	FwdOligotoRevOligoMap map[string]string
	ConcentrationSetPoint Concentration
	TotalVolume Volume
	IncubationTemp Temperature
	IncubationTime Time
)

Data (
)

Inputs (
	DNAPartsMap map[string]*wtype.LHComponent
	Diluent *wtype.LHComponent
	Plate *wtype.LHPlate
)

Outputs (
	OligoPairsMap map[string]*wtype.LHComponent
	OligoPairs []*wtype.LHComponent
)

Requirements {
}

Setup {
}


Steps {

	if len(FwdOligotoRevOligoMap)==0{
		Errorf("No fwd and reverse oligo pairs specified in FwdOligotoRevOligoMap")
	}
	
	// initialise output map 
	OligoPairsMap = make(map[string]*wtype.LHComponent)
	
	// get all well locations for plate
	var welllocations []string = Plate.AllWellPositions(wtype.BYCOLUMN)

	// initialise a counter
	var counter int = 0
	var platenum int = 1
	// range through Oligo pairs map
	for fwd, rev := range  FwdOligotoRevOligoMap{
		
		var fwdConc Concentration
		var revConc Concentration
	
		// check if stock concs are specified for the fwd oligo or use a default
		if conc, found := PartConcentrations[fwd]; found {
			fwdConc = conc
		} else if conc, found := PartConcentrations["default"]; found {
			fwdConc = conc
		}else {
			Errorf(`No entry set for Fwd Oligo  %s and no "default" specified in PartConcentrations: please add one of these.`,fwd)
		}
		
		// check if stock concs are specified for the rev oligo or use a default
		if conc, found := PartConcentrations[rev]; found {
			revConc = conc
		} else if conc, found := PartConcentrations["default"]; found {
			revConc = conc
		}else {
			Errorf(`No entry set for Reverse Oligo  %s and no "default" specified in PartConcentrations: please add one of these.`,rev)
		}
	
		// calculate volume to add for target conc
		fwdoligoVol, err := wunit.VolumeForTargetConcentration(ConcentrationSetPoint, fwdConc, TotalVolume)  
	
		if err != nil {
			Errorf(err.Error())
		}
		
		// calculate volume to add for target conc
		revoligoVol, err := wunit.VolumeForTargetConcentration(ConcentrationSetPoint, revConc, TotalVolume)  
	
		if err != nil {
			Errorf(err.Error())
		}
	
		// next well 
		well := welllocations[counter]
	
		// run PairOligos Antha element recursively
		result := RunSteps(PairOligos,
		Parameters{
			TotalVolume: TotalVolume,
			IncubationTemp: IncubationTemp,
			IncubationTime: IncubationTime,
			FWDOligoVolume: fwdoligoVol,
			REVOligoVolume: revoligoVol,
			Well: well,
			PlateNumber: platenum,
		},Inputs{
			FwdOligo:	DNAPartsMap[fwd],
			RevOligo:	DNAPartsMap[rev],
			Diluent: Diluent,
			Plate: Plate,
		})
		
		
		// update output solution with concentration
		pair := result.Outputs.OligoPairs
		pair.SetConcentration(ConcentrationSetPoint)
		
		// add to output map and slice
		OligoPairsMap[fwd] = pair
		OligoPairs = append(OligoPairs,pair)
		
		// increase counter to find next free well
		if counter +1 == len(welllocations){
			counter = 0
			platenum++	
		}else {
			counter++
		}
	}


}

Analysis {
}


Validation {
}
