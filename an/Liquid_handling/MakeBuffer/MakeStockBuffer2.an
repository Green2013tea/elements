protocol MakeStockBuffer2

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"fmt"
	"strings"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Pubchem"
)

// Input parameters for this protocol (data)
Parameters (
	TargetConc Concentration
	TotalVolume Volume
	MoleculeDensity Density
	ExtraInstructions []string
	StorageTemperature Temperature
)

// Physical Inputs to this protocol with types
Inputs (
	Molecule			*wtype.LHComponent
	Diluent			*wtype.LHComponent
	Vessel 		*wtype.LHPlate
)


// Physical outputs from this protocol with types
Outputs (
	Buffer 			*wtype.LHComponent
)

// Data which is returned from this protocol, and data types
Data (
	Status string
	MassToAddinG Mass
	ConcinGperL Concentration
	ConcinMperL Concentration
	MoleculeInfo pubchem.Molecule
	//OriginalDiluentVolume Volume
)
// Input Requirement specification
Requirements {
	
	
}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	var err error
	
	molecule, err := pubchem.MakeMolecule(Molecule.CName)
      
	  if err != nil {
                Errorf(err.Error())
        }
	
	ConcinGperL = TargetConc.GramPerL(molecule.MolecularWeight)
	ConcinMperL = TargetConc.MolPerL(molecule.MolecularWeight)
	
	MassToAddinG,err = wunit.MassForTargetConcentration(TargetConc, TotalVolume)
	
        if err != nil {
                Errorf(err.Error())
        }	
		
	Buffer = MixInto(Vessel,"",
	mixer.SampleMass(Molecule,MassToAddinG,MoleculeDensity),
	mixer.SampleForTotalVolume(Diluent,TotalVolume))

	Buffer.CName = ConcinMperL.ToString()+" "+ Molecule.CName

	Status = fmt.Sprintln( "Stock added = ", MassToAddinG.ToString(), "of", Molecule.CName,
	"was added up to ", TotalVolume.SIValue(), "L with ",Diluent.CName,
	"to make ", TotalVolume.SIValue(), "L", "of", Buffer.CName,
	"Buffer stock conc =",TargetConc.ToString(),". Extra instructions: ", strings.Join(ExtraInstructions,", "),". Store at ",StorageTemperature.ToString())
			
	MoleculeInfo = molecule

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
/*
type Mole struct {
	number float64
}*/

