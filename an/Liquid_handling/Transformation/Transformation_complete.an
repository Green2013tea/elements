protocol Transformation_complete

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Input parameters for this protocol (data)
Parameters (
	MinimumCompetentCellVolume Volume //= 50.(uL)
	Reactionvolume Volume
	Preplasmidtime Time
	Preplasmidtemp Temperature
	Postplasmidtime Time
	Postplasmidtemp Temperature
	Recoveryvolume Volume
	Recoverytime Time //= 2 (hours)
	Recoverytemp Temperature
	Plateoutvolume Volume
	//Shakerspeed Rate

	//Plateoutdilution float64

)

// Data which is returned from this protocol, and data types
Data ()

// Physical Inputs to this protocol with types
Inputs (
	Reaction *LHComponent
	CompetentCells *LHComponent
	Recoverymedium *LHComponent
	CompetentCellPlate *LHPlate
	AgarPlate *LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Platedculture *LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	var compCells *LHComponent

	CompetentCells.SetVolume(MinimumCompetentCellVolume)

	// find all wells on plate
	allWells := CompetentCellPlate.AllWellPositions(wtype.BYCOLUMN)

	var cellsFound bool

	// range through plate looking to see if the competent cells component is present
	for i := range allWells {
		if CompetentCellPlate.WellMap()[allWells[i]].WContents.CName == CompetentCells.CName && CompetentCells.Volume().GreaterThan(MinimumCompetentCellVolume) {
			compCells = CompetentCellPlate.WellMap()[allWells[i]].WContents
			cellsFound = true
			break
		}
	}
	if !cellsFound {
		// range through plate until an empty one is found
		for i := range allWells {
			if CompetentCellPlate.WellMap()[allWells[i]].Empty() {
				CompetentCells.SetVolume(MinimumCompetentCellVolume)
				CompetentCellPlate.WellMap()[allWells[i]].WContents = CompetentCells
				compCells = CompetentCellPlate.WellMap()[allWells[i]].WContents
				cellsFound = true
				break
			}
		}
	}

	if !cellsFound {
		Errorf("No %s Cells found on plate with greater than %s volume and no empty positions", CompetentCells.CName, MinimumCompetentCellVolume.ToString())
	} else {
		SetInputPlate(CompetentCellPlate)
	}

	readycompetentcells := compCells

	readycompetentcellsComp := Incubate(readycompetentcells, Preplasmidtemp, Preplasmidtime, false) // we can incubate an LHComponent so this is fine

	DNAsample := mixer.Sample(Reaction, Reactionvolume)

	transformedcells := Mix(readycompetentcellsComp, DNAsample)

	transformedcellsComp := Incubate(transformedcells, Postplasmidtemp, Postplasmidtime, false)

	recoverymixture := mixer.Sample(Recoverymedium, Recoveryvolume)

	recoverymix2 := Mix(transformedcellsComp, recoverymixture)

	recoverymix2Comp := Incubate(recoverymix2, Recoverytemp, Recoverytime, true)

	plateout := mixer.Sample(recoverymix2Comp, Plateoutvolume)
	platedculture := MixInto(AgarPlate, "", plateout)

	Platedculture = platedculture

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
