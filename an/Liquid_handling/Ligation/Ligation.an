protocol Ligation_2partsintovector

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
//	"fmt"
)

// Input parameters for this protocol (data)
Parameters (
	ReactionVolume 				Volume
	PartVols 					[]Volume
	VectorVol 					Volume
	BufferVol 					Volume
	AtpVol 						Volume
	LigVol	 					Volume

	ReactionTemp 				Temperature
	ReactionTime 				Time
	InactivationTemp 			Temperature
	InactivationTime 			Time

	OutputReactionName			string
)

// Physical Inputs to this protocol with types
Inputs (
	Part1 				*wtype.LHComponent
	Part2 				*wtype.LHComponent
	Vector 				*wtype.LHComponent
	Buffer 				*wtype.LHComponent
	Water  				*wtype.LHComponent
	Ligase 				*wtype.LHComponent
	Atp 				*wtype.LHComponent
	OutPlate 			*wtype.LHPlate
	InPlate 			*wtype.LHPlate
)


// Physical outputs from this protocol with types
Outputs (
	Reaction *wtype.LHComponent
)

// Data which is returned from this protocol, and data types
Data ()

Requirements {}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	samples := make([]*wtype.LHComponent, 0)
	waterSample := mixer.SampleForTotalVolume(Water, ReactionVolume)
	samples = append(samples, waterSample)

	bufferSample := mixer.Sample(Buffer, BufferVol)
	samples = append(samples, bufferSample)

	atpSample := mixer.Sample(Atp, AtpVol)
	samples = append(samples, atpSample)

	//vectorSample := mixer.Sample(Vector, VectorVol)
	vectorSample := mixer.Sample(Vector, VectorVol)
	samples = append(samples, vectorSample)

	// part 1
		//fmt.Println("creating dna part 1 ", " comp ", Part1.CName, " renamed to ", PartNames[0], " vol ", PartVols[0])
		partSample := mixer.Sample(Part1, PartVols[0])
		//partSample.CName = PartNames[0]
		samples = append(samples, partSample)
		
	// part 2	
		//fmt.Println("creating dna part 2 ", " comp ", Part2.CName, " renamed to ", PartNames[1], " vol ", PartVols[1])
		partSample = mixer.Sample(Part2, PartVols[1])
		//partSample.CName = PartNames[1]
		samples = append(samples, partSample)
	

	ligSample := mixer.Sample(Ligase, LigVol)
	samples = append(samples, ligSample)

	out1 := MixInto(OutPlate, "", samples...)

	// incubate the reaction mixture
	out2 := Incubate(out1, ReactionTemp, ReactionTime, false)
	// inactivate
	Reaction = Incubate(out2, InactivationTemp, InactivationTime, false)
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
