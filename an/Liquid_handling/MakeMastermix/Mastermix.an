protocol Mastermix

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)


// Input parameters for this protocol (data)
Parameters (
	TotalVolumeperMastermix Volume // if buffer is being added
	//ComponentNames []string
	OtherComponentVolumes []Volume
	NumberofMastermixes int
	AliquotbyRow bool
)

// Data which is returned from this protocol, and data types
Data (
	Status string
)


// Physical Inputs to this protocol with types
Inputs (
	Buffer *wtype.LHComponent // optional if nil this is ignored
	OtherComponents []*wtype.LHComponent
	Inplate *wtype.LHPlate
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Mastermixes []*wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	if len(OtherComponents) != len(OtherComponentVolumes){
		Errorf("%d != %d", len(OtherComponents), len(OtherComponentVolumes))
	}
	
	mastermixes := make([]*wtype.LHComponent,0)
	
	if AliquotbyRow {
			Errorf("MixTo based method coming soon!")
		}else {
	for i := 0; i < NumberofMastermixes; i++ {
		
		eachmastermix := make([]*wtype.LHComponent, 0)
		
		if Buffer != nil {
		bufferSample := mixer.SampleForTotalVolume(Buffer, TotalVolumeperMastermix)
		eachmastermix = append(eachmastermix,bufferSample)
		}
		
		for k,component := range OtherComponents {
			if k == len(OtherComponents){
				component.Type = wtype.LTNeedToMix//"NeedToMix"
			}
		componentSample := mixer.Sample(component, OtherComponentVolumes[k])
		eachmastermix = append(eachmastermix,componentSample)
		}
		
		mastermix := MixInto(OutPlate, "", eachmastermix...)
		mastermixes = append(mastermixes,mastermix)
		
	}
	
	}
	Mastermixes = mastermixes
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
