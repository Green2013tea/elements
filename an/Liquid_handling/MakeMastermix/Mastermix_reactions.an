protocol Mastermix_reactions

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)


// Input parameters for this protocol (data)
Parameters (
	TotalVolumeperreaction Volume // if buffer is being added
	VolumetoLeaveforDNAperreaction Volume
	Reactionspermastermix int
	ComponentVolumesperReaction []Volume
	NumberofMastermixes int // add as many as possible option e.g. if == -1
	AliquotbyRow bool
)

// Data which is returned from this protocol, and data types
Data (
	Status string
)


// Physical Inputs to this protocol with types
Inputs (
	TopUpBuffer *wtype.LHComponent // optional if nil this is ignored
	Components []*wtype.LHComponent
	Inplate *wtype.LHPlate
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Mastermixes []*wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	// work out volume to top up to in each case (per reaction) in l:
	topupVolumeperreacttion := TotalVolumeperreaction.SIValue() - VolumetoLeaveforDNAperreaction.SIValue()
	
	
	// multiply by number of reactions per mastermix
	topupVolume := wunit.NewVolume(float64(Reactionspermastermix)*topupVolumeperreacttion,"l")
	
	if len(Components) != len(ComponentVolumesperReaction){
		panic("len(Components) != len(OtherComponentVolumes)")
	}
	
	mastermixes := make([]*wtype.LHComponent,0)
	
	if AliquotbyRow {
			panic("MixTo based method coming soon!")
		}else {
	for i := 0; i < NumberofMastermixes; i++ {
		
		eachmastermix := make([]*wtype.LHComponent, 0)
		
		if TopUpBuffer != nil {
		bufferSample := mixer.SampleForTotalVolume(TopUpBuffer, topupVolume)
		eachmastermix = append(eachmastermix,bufferSample)
		}
		
		for k,component := range Components {
			if k == len(Components){
				component.Type = wtype.LTNeedToMix //"NeedToMix"
			}
		
		// multiply volume of each component by number of reactions per mastermix
		adjustedvol := wunit.NewVolume(float64(Reactionspermastermix)*ComponentVolumesperReaction[k].SIValue(),"l")
			
		componentSample := mixer.Sample(component,adjustedvol)
		eachmastermix = append(eachmastermix,componentSample)
		}
		
		mastermix := MixInto(OutPlate, "",  eachmastermix...)
		mastermixes = append(mastermixes,mastermix)
		
	}
	
	}
	Mastermixes = mastermixes
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
