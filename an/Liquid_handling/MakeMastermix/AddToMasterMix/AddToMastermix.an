// Adds a list of components to a mastermix.
// Volumes of each component are specified by a map. 
// A default volume may be specified which applies to all which are not present explicitely in the map.
// 20% extra volume is made up to ensure sufficient volume is made i.e. accounting for dead volumes etc.
protocol AddToMastermix

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/wutil"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/factory"
	"github.com/antha-lang/antha/antha/anthalib/setup"
)


// Input parameters for this protocol (data)
Parameters (
	// Specify volume per component name per reaction or specify a "default" to apply to all.
	// The actual volume added will be multiplied by the number of Reactionspermastermix
	VolumesToAdd 			map[string]Volume 
	
	// List of names of components to be added
	// These will be used to look up components by name in the factory. 
	// If not found in the factory, new components will be created using dna_mix as a template
	// If empty, the the ComponentIn will be returned as an output
	ComponentsToAdd 		[]string
	
	// This specifies the multiplier of each of the Volumes for each component to add
	// e.g. if "glucose": "1ul" and Reactionspermastermix == 3 then 3ul glucose is added to mastermix
	Reactionspermastermix 	int
	
	// If using the inventory system, select whether to check inventory for parts so missing parts may be ordered.
	CheckPartsInInventory 	bool
	
	// If this is selected the mastermix will be moved to a new location specified by OutPlate type
	// If not selected, the components will be added to the ComponentIn
	MixToNewLocation		bool
)

// Data which is returned from this protocol, and data types
Data (
	Status string
)


// Physical Inputs to this protocol with types
Inputs (
	// The component to add all new components to.
	ComponentIn *LHComponent
	
	// if MixToNewLocation is set to true this will be the plate type which the mastermix will be transferred to.
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Mastermix *LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	// make up 20% extra to ensure reagents are sufficient accounting for dead volumes and evaporation
	extraReactions := float64(Reactionspermastermix) * 1.2
	
	roundedReactions, err := wutil.RoundDown(extraReactions)
	
	if err != nil {
		Errorf(err.Error())
	}
	
	roundedUpReactions := roundedReactions + 1
	
	if roundedUpReactions <= Reactionspermastermix  {
		Reactionspermastermix = Reactionspermastermix + 1
	}else {
		Reactionspermastermix = roundedUpReactions
	}
	
		// if no components to add, return original component in as output
		if len(ComponentsToAdd)==0{
			
			if MixToNewLocation {
				Mastermix = MixInto(OutPlate, "",  ComponentIn)
			}else{
				Mastermix = ComponentIn
			}
 			Status = "No Components added to Mastermix"
			
			}else{
	
		var mastermix *LHComponent
	
		// get components from factory and if not present use default dna component
		
		lhComponents := make([]*LHComponent,0)
		
		if MixToNewLocation {
			lhComponents = append(lhComponents,ComponentIn)
		}
		for _,component := range ComponentsToAdd {
			
			if factory.ComponentInFactory(component){
				lhComponents = append(lhComponents,factory.GetComponentByType(component))
			}else {
				// if component not in factory use dna as default component type
				defaultcomponent := factory.GetComponentByType("dna")
				defaultcomponent.CName = component
				lhComponents = append(lhComponents,defaultcomponent)
			}
			
		}
		
		if CheckPartsInInventory {
	
		// First specify some handles for UI interaction
		// Adds Ordering handle for the UI
		lhComponents[0] = Handle(setup.OrderInfo(lhComponents[0]))
		// we need a plate prep step
		lhComponents[0] = Handle(setup.PlatePrep(lhComponents[0]))

		// a setup step
   	 	lhComponents[0] = Handle(setup.MarkForSetup(lhComponents[0]))
		}
		
		// now make mastermix
		
		eachmastermix := make([]*LHComponent, 0)
		
		
		for k, component := range lhComponents { 	
			if k == len(lhComponents)-1{
				component.Type = wtype.LTPostMix 
			}
		
		var volToUse Volume
		
		if vol, found := VolumesToAdd[component.CName];found{
			volToUse = vol
		}else if vol, found := VolumesToAdd["default"];found{
			volToUse = vol
		}else{
			Errorf("No volume for %s or default volume specified.",component.CName)
		}
		
		// multiply volume of each component by number of reactions per mastermix
		adjustedvol := wunit.MultiplyVolume(volToUse,float64(Reactionspermastermix))
		
			
		componentSample := mixer.Sample(component,adjustedvol)
		
		eachmastermix = append(eachmastermix,componentSample)
		
		
		}
	if MixToNewLocation {
		mastermix = MixInto(OutPlate, "",  eachmastermix...)
	}else{
		for i := range eachmastermix{
			
			if i == 0{
				mastermix = ComponentIn
			}
			
			mastermix =	Mix(mastermix,eachmastermix[i])
		}
	}
	Mastermix = mastermix

	
 	Status = "Mastermix Made"
	}
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
