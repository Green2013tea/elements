// Make a general mastermix comprising of a list of components, list of volumes
// and specifying the number of reactions required
protocol AddToMastermix

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/factory"
	"github.com/antha-lang/antha/antha/anthalib/setup"
)


// Input parameters for this protocol (data)
Parameters (
	// Specify volume per component name or specify a "default" to apply to all
	VolumesToAdd 			map[string]Volume 
	ComponentsToAdd 			[]string
	Reactionspermastermix 	int
	CheckPartsInInventory 	bool
	MixToNewLocation			bool
)

// Data which is returned from this protocol, and data types
Data (
	Status string
)


// Physical Inputs to this protocol with types
Inputs (
	ComponentIn *wtype.LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Mastermix *wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	
	var mastermix *wtype.LHComponent
	
		
		// get components from factory and if not present use default dna component
		
		lhComponents := make([]*wtype.LHComponent,0)
		
		if MixToNewLocation {
			lhComponents = append(lhComponents,ComponentIn)
		}
		for _,component := range ComponentsToAdd {
			
			if factory.ComponentInFactory(component){
				lhComponents = append(lhComponents,factory.GetComponentByType(component))
			}else {
				// if component not in factory use dna as default component type
				defaultcomponent := factory.GetComponentByType("dna")
				defaultcomponent.CName = component
				lhComponents = append(lhComponents,defaultcomponent)
			}
			
		}
		
		if CheckPartsInInventory {
	
		// First specify some handles for UI interaction
		// Adds Ordering handle for the UI
		lhComponents[0] = Handle(setup.OrderInfo(lhComponents[0]))
		// we need a plate prep step
		lhComponents[0] = Handle(setup.PlatePrep(lhComponents[0]))

		// a setup step
   	 	lhComponents[0] = Handle(setup.MarkForSetup(lhComponents[0]))
		}
		
		// now make mastermix
		
		eachmastermix := make([]*wtype.LHComponent, 0)
		
		
		for k, component := range lhComponents { 	
			if k == len(lhComponents)-1{
				component.Type = wtype.LTPostMix 
			}
		
		var volToUse Volume
		
		if vol, found := VolumesToAdd[component.CName];found{
			volToUse = vol
		}else if vol, found := VolumesToAdd["default"];found{
			volToUse = vol
		}else{
			Errorf("No volume for %s or default volume specified.",component.CName)
		}
		
		// multiply volume of each component by number of reactions per mastermix
		adjustedvol := wunit.MultiplyVolume(volToUse,float64(Reactionspermastermix))
			
		componentSample := mixer.Sample(component,adjustedvol)
		
		eachmastermix = append(eachmastermix,componentSample)
		
		
		}
	if MixToNewLocation {
		mastermix = MixInto(OutPlate, "",  eachmastermix...)
	}else{
		for i := range eachmastermix{
			
			if i == 0{
				mastermix = ComponentIn
			}
			
			mastermix =	Mix(mastermix,eachmastermix[i])
		}
	}
	Mastermix = mastermix

	
 	Status = "Mastermix Made"
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
