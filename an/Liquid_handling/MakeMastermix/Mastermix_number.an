protocol Mastermix_numberofreactions

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	
)


// Input parameters for this protocol (data)
Parameters (
	//TotalVolumeperreaction Volume // if buffer is being added
	//VolumetoLeaveforDNAperreaction Volume
	NumberofReactions int
	ComponentVolumesperReaction []Volume
	Projectname string
	//NumberofMastermixes int // add as many as possible option e.g. if == -1
)

// Data which is returned from this protocol, and data types
Data (
	Status string
	Error error
)


// Physical Inputs to this protocol with types
Inputs (
	//TopUpBuffer *wtype.LHComponent // optional if nil this is ignored
	Components []*wtype.LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Mastermix *wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	
	wellpositions := OutPlate.AllWellPositions(wtype.BYCOLUMN)
	
	var counter int
	
	var mastermix *wtype.LHComponent
	
	// work out volume to top up to in each case (per reaction) in l:
	//topupVolumeperreacttion := TotalVolumeperreaction.SIValue() - VolumetoLeaveforDNAperreaction.SIValue()
	
	
	// multiply by number of reactions per mastermix
	//topupVolume := wunit.NewVolume(float64(Reactionspermastermix)*topupVolumeperreacttion,"l")
	
	if len(Components) != len(ComponentVolumesperReaction){
		panic("len(Components) != len(OtherComponentVolumes)")
	}
		
		eachmastermix := make([]*wtype.LHComponent, 0)
		
		//if TopUpBuffer != nil {
		//bufferSample := mixer.SampleForTotalVolume(TopUpBuffer, topupVolume)
		//eachmastermix = append(eachmastermix,bufferSample)
	//	}
		
		for k,component := range Components {
			if k == len(Components){
				component.Type = wtype.LTNeedToMix //"NeedToMix"
			}
		
		// multiply volume of each component by number of reactions per mastermix
		adjustedvol := wunit.NewVolume(float64(NumberofReactions)*ComponentVolumesperReaction[k].SIValue()*1000000,"ul")
			
		componentSample := mixer.Sample(component,adjustedvol)
		eachmastermix = append(eachmastermix,componentSample)
		
		
		}
		
		/*
	totalvolumeoverwellcapacity := wunit.wunit.AddVolumes(eachmastermix).RawValue()/OutPlate.WellMap()[counter].MaxVolume().RawValue()
	
	numberoffullvolumes := wutil.RoundDown(totalvolumeoverwellcapacity)
	
	remainder := math.Remainder(wunit.AddVolumes(eachmastermix).RawValue(),OutPlate.WellMap()[counter].MaxVolume().RawValue())
	
	for i := counter; i < numberoffullvolumes;i++{
		
		eachmastermix := make([]*wtype.LHComponent, 0)
		
		//if TopUpBuffer != nil {
		//bufferSample := mixer.SampleForTotalVolume(TopUpBuffer, topupVolume)
		//eachmastermix = append(eachmastermix,bufferSample)
	//	}
		
		for k,component := range Components {
			if k == len(Components){
				component.Type = wtype.LTNeedToMix //"NeedToMix"
			}
		
		// multiply volume of each component by number of reactions per mastermix
		adjustedvol := wunit.NewVolume(float64(NumberofReactions)*ComponentVolumesperReaction[k].SIValue()*1000000,"ul")
			
		componentSample := mixer.Sample(component,adjustedvol)
		eachmastermix = append(eachmastermix,componentSample)
		
		
		}
		
		*/
		/*
		if  wunit.AddVolumes(eachmastermix).RawValue() > (OutPlate.WellMap()[counter].MaxVolume().RawValue()-OutPlate.WellMap()[counter].ResidualVolume().RawValue()){
			Errorf("Volume too high for desitination well, use bigger destination well or split")
		}
		*/
		
	mastermix = MixInto(OutPlate, wellpositions[counter],  eachmastermix...)
	
	Mastermix = mastermix
	
	Error = wtype.ExportPlateCSV(Projectname+"mastermix.csv", OutPlate,Projectname+"mastermixoutputPlate", []string{wellpositions[counter]}, []*wtype.LHComponent{Mastermix}, []wunit.Volume{Mastermix.Volume()})
	
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
