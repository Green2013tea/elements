// Generates instructions to make a pallette of all colours in an image
protocol MakePalette_OneByOne

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/download"
	"image/color"
	"strconv"
)


// Input parameters for this protocol (data)
Parameters (
	VolumeForFullcolour  Volume
	Imagefilename string // name of image file or if using URL use this field to set the desired filename
	UseURL bool // select this if getting the image from a URL
	URL string // enter URL link to the image file here if applicable
	PosterizeImage bool
	PosterizeLevels int
	Rotate bool
	AutoRotate bool
	LowerThreshold uint8
)

// Data which is returned from this protocol, and data types
Data (
	Numberofcolours int
	//Colournames []string
	Palette color.Palette
	ColourtoComponentMap map[string]*wtype.LHComponent
)


// Physical Inputs to this protocol with types
Inputs (
	Cyan *wtype.LHComponent
	Yellow *wtype.LHComponent
	Magenta *wtype.LHComponent
	Black *wtype.LHComponent
	White *wtype.LHComponent
	OutPlate *wtype.LHPlate
	PalettePlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Colours[]*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	
	// if image is from url, download
	if UseURL {
		_,err := download.File(URL, Imagefilename)
		if err != nil{
			Errorf(err.Error())
		}
	}

	if PosterizeImage{
		_, Imagefilename = image.Posterize(Imagefilename, PosterizeLevels)
	}
	
	
	// make palette of colours from image
	chosencolourpalette := image.MakeSmallPalleteFromImage(Imagefilename, OutPlate,Rotate) 
	
	// make a map of colour to well coordinates
	positiontocolourmap, _,_ := image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette, Rotate, AutoRotate) 
	
	// remove duplicates
	positiontocolourmap = image.RemoveDuplicatesValuesfromMap(positiontocolourmap)
	
	solutions := make([]*wtype.LHComponent, 0)
	colourtoComponentMap := make(map[string]*wtype.LHComponent)
	

	counter := 0


	for _, colour := range positiontocolourmap {
		
		colourindex := chosencolourpalette.Index(colour)
		
		if colour != nil {
		components := make([]*wtype.LHComponent, 0)

		cmyk := image.ColourtoCMYK(colour)
		
		var maxuint8 uint8 = 255		
		
		if cmyk.C <= LowerThreshold && cmyk.Y <= LowerThreshold && cmyk.M <= LowerThreshold && cmyk.K <= LowerThreshold {
		
		continue
			
			}else{
			
		counter = counter + 1
		
		if cmyk.C > LowerThreshold{
			
		cyanvol := wunit.NewVolume(((float64(cmyk.C)/float64(maxuint8)) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		
		
		if cyanvol.RawValue() < 0.5 && cyanvol.Unit().PrefixedSymbol() == "ul"{
				cyanvol.SetValue(0.5)
			}
			
		cyanSample := mixer.Sample(Cyan, cyanvol)
		components = append(components, cyanSample)
		}
		
		if cmyk.Y > LowerThreshold{
		yellowvol := wunit.NewVolume(((float64(cmyk.Y)/float64(maxuint8)) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		
		if yellowvol.RawValue() < 0.5 && yellowvol.Unit().PrefixedSymbol() == "ul"{
				yellowvol.SetValue(0.5)
			}
		
		yellowSample := mixer.Sample(Yellow, yellowvol)
		components = append(components, yellowSample)
		}
		
		if cmyk.M > LowerThreshold{
		magentavol := wunit.NewVolume(((float64(cmyk.M)/float64(maxuint8)) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		
		if magentavol.RawValue() < 0.5 && magentavol.Unit().PrefixedSymbol() == "ul"{
				magentavol.SetValue(0.5)
			}
		
		magentaSample := mixer.Sample(Magenta, magentavol)
		components = append(components, magentaSample)
		}
		
		if cmyk.K > LowerThreshold{
				
		blackvol := wunit.NewVolume(((float64(cmyk.K)/float64(maxuint8)) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		
		if blackvol.RawValue() < 0.5 && blackvol.Unit().PrefixedSymbol() == "ul"{
				blackvol.SetValue(0.5)
			}
		
		blackSample := mixer.Sample(Black, blackvol)
		components = append(components, blackSample)
		}
		
		// top up colour to 4 x volumeforfullcolour with white to make the correct shade
		
	  	// get all component volumes 
		// and change liquid types
		var componentvols []Volume
		for _, component := range components {
			componentvols = append(componentvols,component.Volume())
			component.Type = wtype.LTDoNotMix
		}	
		// calculate volume of white to add
		whitevol := wunit.SubtractVolumes(wunit.MultiplyVolume(VolumeForFullcolour,4),componentvols)
		
		// mix with white sample
		White.Type = wtype.LTPostMix
		
		whiteSample := mixer.Sample(White, whitevol)
		components = append(components, whiteSample)
		

		solution := MixInto(PalettePlate, "", components...)
		
		// change name of component
		originalname := solution.CName
		solution.CName = originalname + "_colour_"+strconv.Itoa(colourindex)
		
		// add solution to be exported later
		solutions = append(solutions, solution)
		colourtoComponentMap[strconv.Itoa(colourindex)] = solution
		
		
		
		}
		
		}
	}

	Colours = solutions
	Numberofcolours = len(chosencolourpalette)
	Palette = chosencolourpalette
	ColourtoComponentMap = colourtoComponentMap

}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}
