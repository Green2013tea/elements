protocol PreProcessImage

import (
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/download"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/anthalib/wtype"

	goimage "image"
)

// Input parameters for this protocol (data)
Parameters (
	ImageFileName string // name of image file or if using URL use this field to set the desired filename
	UseURL bool          // select this if getting the image from a URL
	URL string           // enter URL link to the image file here if applicable
	InputFile File
	Negative bool
	Rotate bool
	AutoRotate bool
	PosterizeImage bool
	PosterizeLevels int
	Palette string
	CheckAllResizeAlgorithms bool
)

// Data which is returned from this protocol, and data types
Data (
	ProcessedImage File
)

// Physical Inputs to this protocol with types
Inputs (
	OutPlate *LHPlate
)

// Physical outputs from this protocol with types
Outputs ()

Requirements {

}

// Conditions to run on startup
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	//-------------------------------------------------------------------------------------
	//Globals
	//-------------------------------------------------------------------------------------

	var imgFile File
	var imgBase *goimage.NRGBA
	var err error

	//-------------------------------------------------------------------------------------
	//Fetching image
	//-------------------------------------------------------------------------------------

	// if image is from url, download
	if UseURL {
		//downloading image
		imgFile, err = download.File(URL, ImageFileName)
		if err != nil {
			Errorf(err.Error())
		}

		//opening the image file
		imgBase, err = image.OpenFile(imgFile)
		if err != nil {
			Errorf(err.Error())
		}
	}

	//opening the image file
	imgBase, err = image.OpenFile(InputFile)
	if err != nil {
		Errorf(err.Error())
	}

	//--------------------------------------------------------------
	//Image Processing
	//--------------------------------------------------------------

	if PosterizeImage {

		imgBase, err = image.Posterize(imgBase, PosterizeLevels)
		if err != nil {
			Errorf(err.Error())
		}
	}

	if CheckAllResizeAlgorithms {
		image.CheckAllResizealgorithms(imgBase, OutPlate, Rotate, image.AllResampleFilters)
	}

	//--------------------------------------------------------------
	//Choosing Palette
	//--------------------------------------------------------------

	chosencolourpalette := image.AvailablePalettes()[Palette]

	//--------------------------------------------------------------
	//Fitting image to plate
	//--------------------------------------------------------------
	_, imgBase = image.ImagetoPlatelayout(imgBase, OutPlate, &chosencolourpalette, Rotate, AutoRotate)

	ProcessedImage, err = image.Export(imgBase, ImageFileName)
	if err != nil {
		Errorf(err.Error())
	}

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {

}
