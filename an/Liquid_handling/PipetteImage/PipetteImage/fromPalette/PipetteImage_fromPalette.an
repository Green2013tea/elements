// Generates instructions to pipette out a defined image onto a defined plate using a defined palette of colours
protocol PipetteImage_fromPalette

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/download"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"image/color"
	"strconv"
	"strings"
)


// Input parameters for this protocol (data)
Parameters (
	VolumePerWell  Volume
	Imagefilename string // name of image file or if using URL use this field to set the desired filename
	UseURL bool // select this if getting the image from a URL
	URL string // enter URL link to the image file here if applicable
	Palette color.Palette
	ColourIndextoComponentMap map[string]*wtype.LHComponent
	OnlythisColour string
	NotthisColour string
	Rotate bool
	AutoRotate bool
	PosterizeImage bool
	PosterizeLevels int
	LiquidType string
)

// Data which is returned from this protocol, and data types
Data (
	Numberofpixels int
)


// Physical Inputs to this protocol with types
Inputs (
	Colourcomponents []*wtype.LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Pixels[]*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	// if image is from url, download
	if UseURL {
		err := download.File(URL, Imagefilename)
		if err != nil{
			Errorf(err.Error())
		}
	}
	
	var err error
	
	if PosterizeImage{
		_, Imagefilename = image.Posterize(Imagefilename, PosterizeLevels)
	}
	
	positiontocolourmap, _,_ := image.ImagetoPlatelayout(Imagefilename, OutPlate, &Palette, Rotate,AutoRotate) 
	
	
	image.CheckAllResizealgorithms(Imagefilename,OutPlate,Rotate,image.AllResampleFilters)


	solutions := make([]*wtype.LHComponent, 0)

	counter := 0
	
	

	for locationkey, colour := range positiontocolourmap {
		
		
		// temp skip of wells with x, e.g. x1,x2,x12
		if !strings.Contains(locationkey,"x") && !strings.Contains(locationkey,"X") {
		
		colourindex := strconv.Itoa(Palette.Index(colour))
		
		component, componentpresent := ColourIndextoComponentMap[colourindex]
		
		/*
		if !componentpresent {
			
		
		for key, _ := range ColourIndextoComponentMap {
			foundthese = append(foundthese,key)
		}
		sort.Strings(foundthese)
		Errorf("Component ", colourindex, "not found in ColourIndextoComponentMap.", "Found these entries only: ", strings.Join(foundthese, ","))
		}
		*/

		if componentpresent {
		
		if LiquidType != ""{
		component.Type, err = wtype.LiquidTypeFromString(LiquidType)
		
		if err != nil {
			Errorf("for component",component.CName, err.Error())
		}
		}
		if OnlythisColour !="" {
	
		if image.Colourcomponentmap[colour] == OnlythisColour{
			counter = counter + 1

		pixelSample := mixer.Sample(component, VolumePerWell)
		solution := MixTo(OutPlate.Type, locationkey, 1, pixelSample)
		solutions = append(solutions, solution)
			}
			
		}else{
			if component.CName != NotthisColour{
			counter = counter + 1
		pixelSample := mixer.Sample(component, VolumePerWell)
		solution := MixTo(OutPlate.Type, locationkey, 1, pixelSample)
		solutions = append(solutions, solution)
		}
		}
		
	}
	}
	}
	Pixels = solutions
	Numberofpixels = len(Pixels)
	
}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

