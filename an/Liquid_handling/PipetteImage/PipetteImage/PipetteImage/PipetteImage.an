// Generates instructions to pipette out a defined image onto a defined plate using a defined palette of coloured bacteria
protocol PipetteImage

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/search"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/factory"
	"image/color"
	"sort"
	"strings"
	goimage "image"
)


// Input parameters for this protocol (data)
Parameters (
	VolumePerWell  Volume 	//
	ImageFileName	string 	//Desired name for the output image file
	InputFile File 			// Image File
	Palettename string 		//Name of the palette set you want to use (look at the map in the source code)
	OnlythisColour string	//use this key to select only one color
	Notthiscolour string	//use this key to remove this color
	UVimage bool			//use this key to use fluorescent proteins
	Rotate bool				//set to true to rotate the image to fit the plate.
	AutoRotate bool			//set to true to rotate the image to fit the plate.
	Subset bool				//set to true to use a few colors from the selected palette
	UseLiquidClass PolicyName//key to set which liquidPolicy to use
	Subsetnames []string	//name of the subset of colors to use
	CheckResizeAlgorithms bool//iterate through potential resizeAlgorithm to resize the image
)

// Data which is returned from this protocol, and data types
Data (
	ResizedImage File				//the image resized to fit the plate
	ResizedImages []*goimage.NRGBA	//the images for each resize algorithms
	Numberofpixels int				//the number of pixels in the final image
	UniqueComponents []string		//the keys of the IDs of the LHcomponents for every color
)


// Physical Inputs to this protocol with types
Inputs (
	ComponentType *LHComponent		//Component type for the paint LHComponents. Set to "paint" if none given.
	OutPlate *LHPlate				//the type of plate to which the image is printed
)

// Physical outputs from this protocol with types
Outputs (
	 Pixels[]*LHComponent			//The LHComponent for each pixel.
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {


	//--------------------------------------------------------------
	//Globals
	//--------------------------------------------------------------

	var imgBase *goimage.NRGBA
	var err error

	solutions := make([]*LHComponent, 0)

	counter := 0
	UniqueComponents = make([]string,0)

	// get components from factory
	componentmap := make(map[string]*LHComponent, 0)

	//--------------------------------------------------------------
	//Opening image
	//--------------------------------------------------------------

	//opening the image file
	imgBase, err = image.OpenFile(InputFile)
	if err != nil{
		Errorf(err.Error())
	}

	//--------------------------------------------------------------
	//Choosing palette
	//--------------------------------------------------------------

	// check that palette name is valid
	_, ok := image.AvailablePalettes()[Palettename]
	
	if !ok {
		var validpalettes []string
		
		for key, _ := range image.AvailablePalettes() {
			validpalettes = append(validpalettes,key)
		}
			
			sort.Strings(validpalettes)
		
		Errorf("Palette", Palettename, "not available. Valid entries are: ",strings.Join(validpalettes,","))
	}
	
	// make sub pallete if necessary
	var chosencolourpalette color.Palette
	
	if Subset {
		chosencolourpalette = image.MakeSubPallette(Palettename, Subsetnames)
	}else {
		chosencolourpalette = image.AvailablePalettes()[Palettename]
	}

	//--------------------------------------------------------------
	//Image processing
	//--------------------------------------------------------------

	if CheckResizeAlgorithms {
		ResizedImages =  image.CheckAllResizealgorithms(imgBase,OutPlate,Rotate,image.AllResampleFilters)
	}

	// resize image to fit dimensions of plate and change each pixel to match closest colour from chosen palette
	// the output of this is a map of well positions to colours needed
	positiontocolourmap, imgBase := image.ImagetoPlatelayout(imgBase, OutPlate, &chosencolourpalette,Rotate,AutoRotate)
	colourtostringmap := image.AvailableComponentmaps()[Palettename]

	// if the image will be printed using fluorescent proteins, 2 previews will be generated for the image (i) under UV light (ii) under visible light

	if UVimage {
		uvmap := image.AvailableComponentmaps()[Palettename]
		visiblemap := image.Visibleequivalentmaps()[Palettename]
		
		if Subset {
			uvmap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
			visiblemap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
		}

		image.PrintFPImagePreview(imgBase,OutPlate, Rotate, visiblemap, uvmap)
	}
	
	if Subset {
		colourtostringmap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
	}

	for colourname, _ := range colourtostringmap {

		componentname := colourtostringmap[colourname]

		// use template component instead
		var componenttopick *LHComponent
		
		if ComponentType != nil{
			componenttopick = ComponentType
		} else { 
			componenttopick = factory.GetComponentByType("Paint")
		}

		componenttopick.CName = componentname
		componentmap[componentname] = componenttopick

	}

	//---------------------------------------------------------------------
	//Pipetting
	//---------------------------------------------------------------------

	// loop through the position to colour map pipetting the correct coloured protein into each well
	for locationkey, colour := range positiontocolourmap {
		
		component := componentmap[colourtostringmap[colour]]
		// make sure liquid class is appropriate for cell culture in case this is not set elsewhere
		component.Type,_ = wtype.LiquidTypeFromString(UseLiquidClass)//wtype.LTCulture
		
		// if the option to only print a single colour is not selected then the pipetting actions for all colours (apart from if not this colour is not empty) will follow
		if OnlythisColour !="" {
	
			if image.Colourcomponentmap[colour] == OnlythisColour{

				UniqueComponents = append(UniqueComponents,component.CName)

				pixelSample := mixer.Sample(component, VolumePerWell)
				solution := MixTo(OutPlate.Type, locationkey, 1,pixelSample)

				solutions = append(solutions, solution)

				counter = counter + 1
			}

		}else{

			if component.CName !=Notthiscolour && component.CName != "transparent"{

			UniqueComponents = append(UniqueComponents,component.CName)

			counter = counter + 1

			component.Type,_ = wtype.LiquidTypeFromString(UseLiquidClass)
			pixelSample := mixer.Sample(component, VolumePerWell)

			solution := MixTo(OutPlate.Type, locationkey, 1, pixelSample)

			solutions = append(solutions, solution)
			}
		}
	}

	UniqueComponents = search.RemoveDuplicates(UniqueComponents)
	Pixels = solutions
	
	Numberofpixels = len(Pixels)

	//--------------------------------------------------------------
	//Exporting resulting images
	//--------------------------------------------------------------

	ResizedImage, err = image.Export(imgBase,ImageFileName)
	if err != nil{
		Errorf(err.Error())
	}

}




// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

