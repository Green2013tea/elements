// Generates instructions to pipette out a defined image onto a defined plate using a defined palette of coloured bacteria
protocol PipetteImage

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/search"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/download"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/factory"
	"image/color"
	"sort"
	"strings"
)


// Input parameters for this protocol (data)
Parameters (
	VolumePerWell  Volume
	Imagefilename string // name of image file or if using URL use this field to set the desired filename
	UseURL bool // select this if getting the image from a URL
	URL string // enter URL link to the image file here if applicable
	Palettename string
	OnlythisColour string
	Notthiscolour string
	UVimage bool
	Rotate bool
	AutoRotate bool
	Subset bool
	UseLiquidClass PolicyName
	Subsetnames []string
	CheckResizeAlgorithms bool
)

// Data which is returned from this protocol, and data types
Data (
	Numberofpixels int
	UniqueComponents []string
)


// Physical Inputs to this protocol with types
Inputs (
	ComponentType *LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	 Pixels[]*LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	// if image is from url, download
	if UseURL {
		err := download.File(URL, Imagefilename)
		if err != nil{
			Errorf(err.Error())
		}
	}
	
	// check that palette name is valid
	_, ok := image.AvailablePalettes()[Palettename]
	
	if !ok {
		var validpalettes []string
		
		for key, _ := range image.AvailablePalettes() {
			validpalettes = append(validpalettes,key)
		}
			
			sort.Strings(validpalettes)
		
		Errorf("Palette", Palettename, "not available. Valid entries are: ",strings.Join(validpalettes,","))
	}
	
	// make sub pallete if necessary
	var chosencolourpalette color.Palette
	
	if Subset {
		chosencolourpalette = image.MakeSubPallette(Palettename, Subsetnames)
	}else {
		chosencolourpalette = image.AvailablePalettes()[Palettename]
	}
	
	
	if CheckResizeAlgorithms {
		image.CheckAllResizealgorithms(Imagefilename,OutPlate,Rotate,image.AllResampleFilters)
	}
	// resize image to fit dimensions of plate and change each pixel to match closest colour from chosen palette
	// the output of this is a map of well positions to colours needed
	positiontocolourmap, _,_ := image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette,Rotate,AutoRotate) 
	
	colourtostringmap := image.AvailableComponentmaps()[Palettename]
	
	// if the image will be printed using fluorescent proteins, 2 previews will be generated for the image (i) under UV light (ii) under visible light 
	
	if UVimage {
		uvmap := image.AvailableComponentmaps()[Palettename]
		visiblemap := image.Visibleequivalentmaps()[Palettename]
		
		if Subset {
		uvmap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
		visiblemap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
		}
		image.PrintFPImagePreview(Imagefilename,OutPlate, Rotate, visiblemap, uvmap)
	}

	// get components from factory
	componentmap := make(map[string]*LHComponent, 0)
	
	if Subset {
	colourtostringmap = image.MakeSubMapfromMap(colourtostringmap, Subsetnames)
	}

	for colourname, _ := range colourtostringmap {

		componentname := colourtostringmap[colourname]

		// use template component instead
		var componenttopick *LHComponent
		
		if ComponentType != nil{
		componenttopick = ComponentType
		} else { 
		componenttopick = factory.GetComponentByType("Paint")
		}
		componenttopick.CName = componentname

		componentmap[componentname] = componenttopick

	}
	//fmt.Println(componentmap)

	solutions := make([]*LHComponent, 0)

	counter := 0
	UniqueComponents = make([]string,0)


// loop through the position to colour map pipeting the correct coloured protein into each well
	for locationkey, colour := range positiontocolourmap {
		
		component := componentmap[colourtostringmap[colour]]

		// make sure liquid class is appropriate for cell culture in case this is not set elsewhere
		component.Type,_ = wtype.LiquidTypeFromString(UseLiquidClass)//wtype.LTCulture
		
		// if the option to only print a single colour is not selected then the pipetting actions for all colours (apart from if not this colour is not empty) will follow
		if OnlythisColour !="" /*&& !strings.Contains(locationkey,"x")&& !strings.Contains(locationkey,"X")*/{
	
		if image.Colourcomponentmap[colour] == OnlythisColour{
			
			UniqueComponents = append(UniqueComponents,component.CName)
			
			counter = counter + 1
	
		pixelSample := mixer.Sample(component, VolumePerWell)
	
		solution := MixTo(OutPlate.Type, locationkey, 1,pixelSample)
		
		solutions = append(solutions, solution)
			}
			
		}else{
			if component.CName !=Notthiscolour && component.CName != "transparent" /*&& !strings.Contains(locationkey,"x")&& !strings.Contains(locationkey,"X")*/{
				
			UniqueComponents = append(UniqueComponents,component.CName)
			
			counter = counter + 1
	
		component.Type,_ = wtype.LiquidTypeFromString(UseLiquidClass)
		pixelSample := mixer.Sample(component, VolumePerWell)
	
		solution := MixTo(OutPlate.Type, locationkey, 1, pixelSample)
		
		solutions = append(solutions, solution)
		}
		}
	}

	UniqueComponents = search.RemoveDuplicates(UniqueComponents)
	Pixels = solutions
	
	Numberofpixels = len(Pixels)
	
}




// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

