// Protocol PlateOutReactionInput takes in an array of TransformedCells (i.e. recovered cells) from another element (e.g. AutTransformation_multi) and performs a plate out reaction onto plates of the users choice
protocol AutoPlateOut_Multi

// Place golang packages to import here
import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/execute"
)

// Parameters to this protocol
Parameters (

	//Optionally specify the number of agar plates to begin counting from (Default = 1)
	AgarPlateNumber int

	//Set Incubation temperature if using an associated Incubator
	IncubationTemp wunit.Temperature

	//Set Incubation time if using an associated Incubator
	IncubationTime wunit.Time

	//Specify number of technical replicates to plate out
	NumberofReplicates int

	//Optionally specify the liquid handling policy to use when plating out (Default = PlateOut)
	PlateOutLiquidPolicy PolicyName

	//Specify one or more volumes to plate out for each cell solution.
	// A "default" may also be specified, which will apply to all reactions which do not have volumes specified explicitely.
	PlateOutVolumes map[string][]Volume

	//Optionally specify if some wells have already been used in the Agar Plate
	//(i.e. if a plate has been previously used for tranformations, or an overlay)
	WellsAlreadyUsed int
)

// Output data of this protocol
Data ()

// Physical inputs to this protocol
Inputs (

	//The output plate type, which can be any plate within the Antha library (Default = falcon6wellAgar)
	//An omniwell may be used for plating out up to 96 spots, but a 96 well plate image must be selected in Antha (e.g. pcrplate_skirted)
	AgarPlate *LHPlate

	//The transformed cells that can be inputed from another protocol (e.g. AutTransformation_multi)
	TransformedCells []*LHComponent
)

// Physical outputs to this protocol
Outputs (
	PlatedCultures []*LHComponent //the plated cultures are outputted as an array which can be fed into other protocols in the Antha workflow
)

// Conditions to run on startup
Setup {

}

// The core process for this protocol. These steps are executed for each input.
Steps {
	//Setup counter to track WellsAlreadyUsed
	var counter int = WellsAlreadyUsed
	var platecounter int = AgarPlateNumber

	//Range through the inputted array and perform the PlateOutTest protocol
	for _, plateout := range TransformedCells {

		var reactionname string = plateout.CName

		var volumes []Volume

		//Check if volumes speicifed for each reaction and assign default if necessary
		if value, found := PlateOutVolumes[reactionname]; found {
			volumes = value
		} else if value, found := PlateOutVolumes["default"]; found {
			volumes = value
		} else {
			Errorf("No plate out volumes set for %s. Please set these", reactionname)
		}

		//Range through the plate out volumes
		for _, plateoutvols := range volumes {

			//Run PlateOut element
			result := RunSteps(PlateOutTest,
				Parameters{
					AgarPlateNumber:      platecounter,
					IncubationTemp:       IncubationTemp,
					IncubationTime:       IncubationTime,
					NumberofReplicates:   NumberofReplicates,
					PlateOutVolume:       plateoutvols,
					PlateOutLiquidPolicy: PlateOutLiquidPolicy,
					WellsAlreadyUsed:     counter,
				}, Inputs{
					TransformedCells: plateout,
					AgarPlate:        AgarPlate,
				})

			//Append outputted plated cultures
			for _, plateoutorder := range result.Outputs.PlatedCultures {
				PlatedCultures = append(PlatedCultures, plateoutorder)
			}

			//Increase counters
			counter = result.Outputs.WellsUsed
			platecounter = result.Outputs.TransformedPlateNumber
		}
	}
}

// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
