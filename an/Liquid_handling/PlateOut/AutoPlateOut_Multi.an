// Protocol PlateOutReactionInput takes in an array of TransformedCells (i.e. recovered cells) from another element (e.g. AutTransformation_multi) and performs a plate out reaction onto plates of the users choice
protocol AutoPlateOut_Multi

// Place golang packages to import here
import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/execute"
)

// Parameters to this protocol
Parameters (
	AgarPlateNumber int //optionally specify the number of agar plates to begin counting from (Default = 1)
	Dilution int //specify if dilution of the transformed cells is required, and the level of dilution (Default = 1 in which the sample will not be diluted). Dilution will be performed with the Diluent (Default = LB)
	IncubationTemp wunit.Temperature //set Incubation temperature
	IncubationTime wunit.Time //set Incubation time
	NumberofReplicates int //specify number of technical replicates to plate out
	PlateOutLiquidPolicy string //optionally specify the liquid handling policy to use when plating out (Default = PlateOut). Can change
	PlateOutVolume Volume //specify the plate out volume. If Dilution is required, this volume will be made up to with the transformed cells and the diluent
	WellsAlreadyUsed int //optionally specify if some wells have already been used in the Agar Plate (i.e. if a plate is being used for multiple tranformations, or an overlay)
)

// Output data of this protocol
Data (
)

// Physical inputs to this protocol
Inputs (
	AgarPlate *wtype.LHPlate //the output plate type, which can be any plate within the Antha library (Default = falcon6wellAgar)
	Diluent *wtype.LHComponent //the liquid with which to dilute the transformed cells (Default = LB)
	TransformedCells []*wtype.LHComponent //the transformed cells that can be inputted from another protocol (e.g.  AutTransformation_multi)
)

// Physical outputs to this protocol
Outputs (
	PlatedCultures []*wtype.LHComponent //the plated cultures are outputted as an array which can be fed into other protocols in the Antha workflow
)

// Conditions to run on startup
Setup {

}

// The core process for this protocol. These steps are executed for each input.
Steps {

	//range through the inputted array and perform the PlateOutTest protocol
	for _, plateout := range TransformedCells {

	// Run PlateOut element
	result := RunSteps(PlateOutTest,
			Parameters{
				AgarPlateNumber: AgarPlateNumber,
				Diluent: Diluent,
				Dilution: Dilution,
				IncubationTemp: IncubationTemp,
				IncubationTime: IncubationTime,
        NumberofReplicates: NumberofReplicates,
				PlateOutVolume: PlateOutVolume,
        PlateOutLiquidPolicy: PlateOutLiquidPolicy,
				WellsAlreadyUsed: WellsAlreadyUsed,
							},Inputs {
				TransformedCells: plateout,
				AgarPlate: AgarPlate,
							})
		for _, plateoutorder := range result.Outputs.PlatedCultures{
			PlatedCultures = append(PlatedCultures, plateoutorder)
		}

}
}

// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
