// Assemble multiple assemblies using TypeIIs construct assembly
protocol MakeAssemblies

import (
	"fmt"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

Parameters {
	ReactionVolume Volume     // Reaction volume
	PartVols       [][]Volume // Volumes corresponding to input parts
	PartNames      [][]string // Names corresonding to input parts
	VectorVol      Volume     // Vector volume
	BufferVol      Volume     // Buffer volume
	AtpVol         Volume     // ATP volume
	ReVol          Volume     // Restriction enzyme volume
	LigVol         Volume     // Ligase volume

	ReactionTemp     Temperature // Reaction temperature
	ReactionTime     Time        // Reaction time
	InactivationTemp Temperature // Inactivation temperature
	InactivationTime Time        // Inactivation time

	OutputReactionName string // Prefix for reaction names
}

Inputs {
	Parts             [][]*LHComponent // Input parts, one per assembly
	Vector            *LHComponent     // Vector to use
	RestrictionEnzyme *LHComponent     // Restriction enzyme to use
	Buffer            *LHComponent     // Buffer to use
	Water             *LHComponent     // Water to use
	Ligase            *LHComponent     // Ligase to use
	Atp               *LHComponent     // ATP to use
	OutPlate          *LHPlate         // Output plate
}

Outputs {
	Reactions []*LHComponent // List of assembled parts
}

Setup {}

Steps {
	for k := range Parts {
		result := RunSteps(TypeIISConstructAssembly,
			Parameters{
				ReactionVolume:     ReactionVolume,
				PartVols:           PartVols[k],
				PartNames:          PartNames[k],
				VectorVol:          VectorVol,
				BufferVol:          BufferVol,
				AtpVol:             AtpVol,
				ReVol:              ReVol,
				LigVol:             LigVol,
				ReactionTemp:       ReactionTemp,
				ReactionTime:       ReactionTime,
				OutputReactionName: fmt.Sprintf("%s%d", OutputReactionName, k),
			}, Inputs{
				Parts:             Parts[k],
				Vector:            Vector,
				RestrictionEnzyme: RestrictionEnzyme,
				Buffer:            Buffer,
				Water:             Water,
				Ligase:            Ligase,
				Atp:               Atp,
				OutPlate:          OutPlate,
			})
		Reactions = append(Reactions, result.Outputs.Reaction)
	}
}

Analysis {}

Validation {}
