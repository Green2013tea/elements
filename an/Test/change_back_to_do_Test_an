protocol Test

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"fmt"
)

// Input parameters for this protocol (data)
Parameters (
	ReactionVolume				Volume
	PartVols				[]Volume
	PartNames				[]string
	MMXVol					Volume
	ReactionTemp				Temperature
	ReactionTime				Time
	InactivationTemp			Temperature
	InactivationTime			Time
	OutputReactionName			string
	OutputLocation 				string
	OutputPlateNum				string
)

// Physical Inputs to this protocol with types
Inputs (
	Parts			[]*wtype.LHComponent
	Water			*wtype.LHComponent
	MasterMix		*wtype.LHComponent
	OutPlate		*wtype.LHPlate
)


// Physical outputs from this protocol with types
Outputs (
	Reaction *wtype.LHSolution
	Reaction2 *wtype.LHSolution
)

// Data which is returned from this protocol, and data types
Data ()

Requirements {}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	samples := make([]*wtype.LHComponent, 0)
	waterSample := mixer.SampleForTotalVolume(Water, ReactionVolume)
	samples = append(samples, waterSample)
	for k, part := range Parts {
		fmt.Println("creating dna part num ", k, " comp ", part.CName, " renamed to ", PartNames[k], " vol ", PartVols[k])
		partSample := mixer.Sample(part, PartVols[k])
		partSample.CName = PartNames[k]
		samples = append(samples, partSample)
	}

	// Do MasterMix at the end ... this change was made to prevent enzymes hanging around with
	// subsets of parts for any length of time

	mmxSample:=mixer.Sample(MasterMix, MMXVol)
	samples=append(samples, mmxSample)

	Reaction = MixTo(OutPlate, OutputLocation, samples...)


	v:=wunit.NewVolume(40, "ul")

	sample:= mixer.Sample(Reaction,v)
	Reaction2 = Mix(sample)

	// incubate the reaction mixture
	// commented out pending changes to incubate
	//Incubate(Reaction, ReactionTemp, ReactionTime, false)
	// inactivate
	//Incubate(Reaction, InactivationTemp, InactivationTime, false)
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
