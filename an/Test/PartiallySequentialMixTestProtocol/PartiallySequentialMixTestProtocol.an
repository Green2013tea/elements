protocol PartiallySequentialMixTestProtocol

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Input parameters for this protocol (data)
Parameters (
	ReactionVolume				Volume
	PartVols				[]Volume
	PartNames				[]string
	ReactionTemp				Temperature
	ReactionTime				Time
	InactivationTemp			Temperature
	InactivationTime			Time
	OutputReactionName			string
	OutputLocation 				string
	OutputPlateNum				int
)

// Physical Inputs to this protocol with types
Inputs (
	Parts			[]*wtype.LHComponent
	MasterMix		*wtype.LHComponent
	OutPlate		*wtype.LHPlate
)


// Physical outputs from this protocol with types
Outputs (
	Reaction *wtype.LHComponent
)

// Data which is returned from this protocol, and data types
Data ()

Requirements {}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	mmxSample:=mixer.SampleForTotalVolume(MasterMix,ReactionVolume)
	mixture:=MixTo(OutPlate.Type, OutputLocation, OutputPlateNum, mmxSample)

	samples:=make([]*wtype.LHComponent, 0, 1)
	samples=append(samples, mixture)

	for k, part := range Parts {
		partSample := mixer.Sample(part, PartVols[k])
		partSample.CName = PartNames[k]
		samples=append(samples, partSample)
	}

	Reaction = Mix(samples...)

	// incubate the reaction mixture
	// commented out pending changes to incubate
	//Incubate(Reaction, ReactionTemp, ReactionTime, false)
	// inactivate
	//Incubate(Reaction, InactivationTemp, InactivationTime, false)
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
