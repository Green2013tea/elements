/* Islam, R. S., Tisi, D., Levy, M. S. & Lye, G. J. Scale-up of Escherichia coli growth and recombinant protein expression conditions from microwell to laboratory and pilot scale based on matched kLa. Biotechnol. Bioeng. 99, 1128–1139 (2008).

equation (6)

func kLa_squaremicrowell = (3.94 x 10E-4) * (D/dv)* ai * RE^1.91 * exp ^ (a * Fr^b) // a little unclear whether exp is e to (afr^b) from paper but assumed this is the case

kla = dimensionless
	var D = diffusion coefficient, m2 􏰀 s􏰁1
	var dv = microwell vessel diameter, m
	var ai = initial specific surface area, m􏰁1
	var RE = Reynolds number, (ro * n * dv * 2/mu), dimensionless
		var	ro	= density, kg 􏰀/ m􏰁3
		var	n 	= shaking frequency, s􏰁1
		var	mu	= viscosity, kg 􏰀/ m􏰁 /􏰀 s
	const exp = Eulers number, 2.718281828

	var Fr = Froude number = dt(2 * math.Pi * n)^2 /(2 * g), (dimensionless)
		var dt = shaking amplitude, m
		const g = acceleration due to gravity, m 􏰀/ s􏰁2
	const	a = constant
	const	b = constant
*/
// make type /time and units of /hour and per second
// check accuracy against literature and experimental values	
protocol Kla 
import (
	"fmt"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/devices"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/eng"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Labware"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Liquidclasses"
	//"github.com/antha-lang/antha/antha/anthalib/wunit"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Setpoints"
	//"github.com/montanaflynn/stats"
	"math"

)
Parameters (
	Platetype string
	Liquid string
	Shakertype string
	
	Rpm wunit.Rate //float64
	Fillvolume Volume
	
	TargetRE float64
	D float64 //diffusion coefficient, m2 􏰀 s􏰁1 // from wikipedia: Oxygen (dis) - Water (l) 	@25 degrees C 	2.10x10−5 cm2/s // should call from elsewhere really
  // add temp etc?
	
)
Data (
	Status string
	Flowstate string
	Necessaryshakerspeed wunit.Rate //float64 
	CalculatedKla float64 
	Ncrit wunit.Rate//float64
	
)
Inputs (
)
Outputs (
)
Requirements {
}
Setup {
} 
Steps {
	dv := labware.Labwaregeometry[Platetype]["dv"] // microwell vessel diameter, m 0.017 //
	ai := labware.Labwaregeometry[Platetype]["ai"] // initial specific surface area, /m 96.0

	ro := liquidclasses.Liquidclass[Liquid]["ro"] //density, kg 􏰀/ m􏰁3 999.7 // environment dependent
	mu := liquidclasses.Liquidclass[Liquid]["mu"] //0.001           environment dependent                        //liquidclasses.Liquidclass[liquid]["mu"] viscosity, kg 􏰀/ m􏰁 /􏰀 s

	var n float64 //shaking frequency per second
	
	fmt.Println("Rpm.Unit().RawSymbol()",Rpm.Unit().RawSymbol())
	if Rpm.Unit().RawSymbol() == `/s`{
		n = Rpm.RawValue()
		fmt.Println("n = Rpm.RawValue()", Rpm.RawValue())
	}else if Rpm.Unit().RawSymbol() == `/min`{
		n = Rpm.RawValue()/60
	}
	
	//n = Rpm / 60 //shaking frequency, s􏰁1
	//var RE = Reynolds number, (ro * n * dv * 2/mu), dimensionless
	//const exp = Eulers number, 2.718281828
	//Fr = Froude number = dt(2 * math.Pi * n)^2 /(2 * g), (dimensionless)
	
	dt := devices.Shaker[Shakertype]["dt"] //0.008                                  //shaking amplitude, m // move to shaker package

	a := labware.Labwaregeometry[Platetype]["a"] //0.88   //
	b := labware.Labwaregeometry[Platetype]["b"] //1.24

	Fr := eng.Froude(dt, n, eng.G)
	Re := eng.RE(ro, n, mu, dv)
	Necessaryshakerspeed = eng.Shakerspeed(TargetRE, ro, mu, dv)
	
	
	Vl := Fillvolume.SIValue()
	Sigma := liquidclasses.Liquidclass[Liquid]["sigma"]
	
	
	// Check Ncrit! original paper used this to calculate speed in shallow round well plates... double check paper
	
	// add loop to use correct formula dependent on Platetype etc...
	// currently only one plate type supported
	//Criticalshakerspeed := "error"
	if labware.Labwaregeometry[Platetype]["numberofwellsides"] == 4.0 {
		Ncrit = eng.Ncrit_srw(Sigma, dv, Vl , ro , dt ) 
	}/*else{Criticalshakerspeed := "error: kla estimation for this plate type not yet implemented"}
	/*if i == 4.0 {
		Criticalshakerspeed := "error"
	}	
		*/
		//Criticalshakerspeed := stats.Round(eng.Ncrit_srw(Sigma, dv, Vl , ro , dt ),3)
	
	
	if Re > 5E3 {
		Flowstate = fmt.Sprintln("Flowstate = Turbulent flow")
	}
	
	
	//klainputs :=fmt.Sprintln("D",D,"dv", dv,"ai", ai,"Re", Re,"a", a,"Fr", Fr,"b", b)
	
	fmt.Println("D, dv, ai, Re, a, Fr, b",D, dv, ai, Re, a, Fr, b)
	
	fmt.Println("math.Pow(RE, 1.91)",math.Pow(Re, 1.91),"math.Pow(froude, b)",math.Pow(Fr, b),"(math.Pow(math.E, (a * (math.Pow(froude, b)))))",(math.Exp(a * (math.Pow(Fr, b)))),"a * (math.Pow(froude, b))",a * (math.Pow(Fr, b)))
	
	
	fmt.Println("e", math.E,"power",(a * (math.Pow(Fr, b))) )

	
	CalculatedKla = eng.KLa_squaremicrowell(D, dv, ai, Re, a, Fr, b)
	
	//if CalculatedKla ==  {
	//	CalculatedKla = 0
//	}
	
	Status = fmt.Sprintln("TargetRE = ", TargetRE,"Calculated Reynolds number = ", Re,"shakerspeedrequired for targetRE= ", Necessaryshakerspeed.ToString() /* *60 */,"Froude number = ", Fr,"kla =", CalculatedKla, "/h", "Ncrit	=", Ncrit.ToString()/*,"/S"*/)
	//CalculatedKla = setpoints.CalculateKlasquaremicrowell(Platetype, Liquid, Rpm, Shakertype, TargetRE, D)
	
	}
Analysis {
	
	
} // works in either analysis or steps sections

Validation {

}


