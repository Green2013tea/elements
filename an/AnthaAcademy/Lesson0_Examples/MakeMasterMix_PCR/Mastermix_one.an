// Make a general mastermix comprising of a list of components, list of volumes
// and specifying the number of reactions required
protocol Mastermix_one

import (
	"fmt"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
)

// Input parameters for this protocol (data)
Parameters (
	Reactionspermastermix int
	ComponentVolumesperReaction []Volume
)

// Data which is returned from this protocol, and data types
Data (
	Status string
)

// Physical Inputs to this protocol with types
Inputs (
	//TopUpBuffer *LHComponent // optional if nil this is ignored
	Components []*LHComponent
	OutPlate *LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Mastermix *LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	var mastermix *LHComponent

	if len(Components) != len(ComponentVolumesperReaction) {
		panic("len(Components) != len(OtherComponentVolumes)")
	}

	eachmastermix := make([]*LHComponent, 0)

	for k, component := range Components {
		if k == len(Components) {
			component.Type = wtype.LTNeedToMix //"NeedToMix"
		}

		// multiply volume of each component by number of reactions per mastermix
		adjustedvol := wunit.NewVolume(float64(Reactionspermastermix)*ComponentVolumesperReaction[k].SIValue()*1000000, "ul")

		componentSample := mixer.Sample(component, adjustedvol)
		component.CName = "component" + fmt.Sprint(k+1)
		eachmastermix = append(eachmastermix, componentSample)

	}
	mastermix = MixInto(OutPlate, "", eachmastermix...)

	Mastermix = mastermix

	Status = "Mastermix Made"

}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
