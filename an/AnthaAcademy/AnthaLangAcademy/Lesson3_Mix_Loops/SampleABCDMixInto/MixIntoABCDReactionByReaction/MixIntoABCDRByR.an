// Aliquot a solution into a specified plate.
// optionally premix the solution before aliquoting
protocol MixIntoABCDRByR

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)


// Input parameters for this protocol (data)
Parameters (
	SampleVolumeA Volume
	SampleVolumeB Volume
	SampleVolumeC Volume
	SampleVolumeD Volume
	NumberOfReactions int
)

// Data which is returned from this protocol, and data types
Data (

)


// Physical Inputs to this protocol with types
Inputs (
	SampleNameA *wtype.LHComponent
	SampleNameB *wtype.LHComponent
	SampleNameC *wtype.LHComponent
	SampleNameD *wtype.LHComponent
	Outplate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
SampleABCDMixreactions []*wtype.LHComponent
)

Requirements {

}

// Conditions to run on startup
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	sampleABCDMixreactions := make([]*wtype.LHComponent,0)
  for i:=0; i < NumberOfReactions; i++ {
		eachreaction := make([]*wtype.LHComponent,0)
		sampleA := mixer.Sample(SampleNameA, SampleVolumeA)
		eachreaction = append(eachreaction,sampleA)
		sampleB := mixer.Sample(SampleNameB, SampleVolumeB)
		eachreaction = append(eachreaction, sampleB)
		sampleC := mixer.Sample(SampleNameC, SampleVolumeC)
		eachreaction = append(eachreaction, sampleC)
		sampleD := mixer.Sample(SampleNameD, SampleVolumeD)
		eachreaction = append(eachreaction, sampleD)
		sampleABCDMixreaction := MixInto(Outplate,"", eachreaction...)
		sampleABCDMixreactions = append(sampleABCDMixreactions,sampleABCDMixreaction)
}
SampleABCDMixreactions =sampleABCDMixreactions
}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed
//correctly. Optionally, destructive tests can be performed to validate
//results on a dipstick basis
Validation {

}
