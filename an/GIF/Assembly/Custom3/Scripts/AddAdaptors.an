// Protocol FormL1TU
//
// This is to make a L1 part for a switch. It is denoted as an integrase Unit, IU

protocol AddAdaptors

import "bytes"

func AddL0Adaptor (L0PartsA []Part, L1Position int) []Part {

	//use L1 position (device) to add adapter to the L0 Parts of that device

	//we do not return L0PartsB here because it is still considered partsA (no restriction overhangs)

	//3' and 5' ends position variables placeholders to hold the overhangs

	var threePrimePosition int
	var fivePrimePosition int

	//finding the 3' and 5' end of the part
	for x := range L0PartsA{
		switch {
			case L0PartsA[x].position < threePrimePosition :
				threePrimePosition = L0PartsA[x].position
			case L0PartsA[x].position > fivePrimePosition :
				L0PartsA[x].position = fivePrimePosition
		}
	}

	//adding the overhangs to the sequence
	for p := range L0PartsA{
		switch {
			case L0PartsA[p].position == threePrimePosition :

				var buffer bytes.Buffer
				buffer.WriteString(adaptersLib[0][L1Position][0])
				buffer.WriteString(L0PartsA[p].seq)

				L0PartsA[p].seq = buffer.String()

			case L0PartsA[p].position == fivePrimePosition :

				var buffer bytes.Buffer
				buffer.WriteString(L0PartsA[p].seq)
				buffer.WriteString(adaptersLib[0][L1Position][1])

				L0PartsA[p].seq = buffer.String()
		}
	}
	return L0PartsA
}

// Parameters to this protocol
Parameters (
	PartsA_In	[]Part
	L1Position	int
)

// Output data of this protocol
Data (
	PartsA_Out		[]Part
)

// Conditions to run on startup
Setup {
}

// The core process for this protocol. These steps are executed for each input.
Steps {

	//We consider the output partA because restriction overhangs have not been added yet
	PartsA_Out = AddL0Adaptor(PartsA_In, L1Position)

}

// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
