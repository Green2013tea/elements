// Protocol MoClo performs something.
//
// All of this text should be used to describe what this protocol does.  It
// should begin with a one sentence summary begining with "Protocol X...". If
// neccessary, a empty line with a detailed description can follow (like this
// description does).
//
// Spend some time thinking of a good protocol name as this is the name by
// which this protocol will be referred. It should convey the purpose and scope
// of the protocol to an outsider and should suggest an obvious
// parameterization.
//
// Protocol names are also case-sensitive, so try to use a consistent casing
// scheme.
//
// Examples of bad names:
//   - MyProtocol
//   - GeneAssembly
//   - WildCAPSsmallANDLARGE
//
// Better names:
//   - Aliquot
//   - TypeIIsConstructAssembly
protocol L0_init

// Place golang packages to import here
import (
	//"github.com/antha-lang/antha/antha/anthalib/wtype"
	"fmt"
)

// Parameters to this protocol
Parameters (

	DNA		string
	PartType	string
)

// Output data of this protocol
Data (
	//DNA
)

// Physical inputs to this protocol
Inputs (

)

// Physical outputs to this protocol
Outputs (

)

// Conditions to run on startup
Setup {

}

// The core process for this protocol. These steps are executed for each input.
Steps {

	printSlice := func (s string, x []string) {
		fmt.Printf("%s len=%d cap=%d %v\n",
			s, len(x), cap(x), x)
	}

	L0_backbones := make([]string, 5)
	L0_restrictionSites := make([]string,5)

	printSlice("1: ", L0_backbones)
	printSlice("2: ", L0_restrictionSites)
}

// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
