//This will take an AnthaImg object and generate the instructions for the robot to print it on a plate.
protocol PrintAnthaImage

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/anthalib/mixer"

	"fmt"
)


// Input parameters for this protocol (data)
Parameters (
	AnthaImage	*image.AnthaImg	//AnthaImage to print on a plate
	PixVolume	Volume			//Volume of LHComponent needed to make a pixel
)

// Data which is returned from this protocol, and data types
Data (

)


// Physical Inputs to this protocol with types
Inputs (

)

// Physical outputs from this protocol with types
Outputs (

)

Requirements {
	
}

// Conditions to run on startup
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	//------------------------------------------------------------------
	//Globals
	//------------------------------------------------------------------

	//placeholders
	var pixelSolution *LHComponent
	var wellLocation  string

	//------------------------------------------------------------------
	//Iterating through each pixels in the image and pipetting them
	//------------------------------------------------------------------


	counter :=0
	for _, pix := range AnthaImage.Pix {

		//Getting the LHComponent of this pixel
		pixelSolution = pix.Color.Component

		//formatting the well coordinates to A1 format
		wellLocation = pix.Location.FormatA1()

		//initiating the LHComponent with the volume
		pixelSolution = mixer.Sample(pixelSolution, PixVolume)

		//Executing the liquidHandling action
		MixNamed(AnthaImage.Plate.Type, wellLocation, AnthaImage.Plate.ID, pixelSolution)

		fmt.Println(counter)

		counter++
	}

	fmt.Println("AnthaImage printed")
	//getting the number of pipette actions


}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

