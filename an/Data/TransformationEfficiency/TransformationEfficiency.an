// Protocol TransformationEfficiency calculates transformation efficiency based on colony count and transformation parameters.
protocol TransformationEfficiency

// Place golang packages to import here
import (
)
 
type transformationEfficiency struct {
	CFUperugperml float64
	MetaData metaData 
}


type metaData struct {
	CFU int
	PlateOutVolume Volume
	DNA DNASequence
	DNAMass Mass
	Assembly map[string][]DNASequence
}

type relativeTransformationEfficiency struct {
	ControlEfficiency transformationEfficiency
	ExperimentalEfficiency transformationEfficiency
}

func calcTransformationEfficiency(colonyCount int, plateoutVolumeinml Volume, plateOutdilutionX int, dnamassinug Mass)(cfuperugperml float64){
	cfuperugperml = float64(colonyCount) * float64(plateOutdilutionX) / ((volumeToml(plateoutVolumeinml)) * massToug(dnamassinug))
	return
}

func newTransformationEfficiency(seq DNASequence colonyCount int, plateoutVolumeinml Volume, plateOutdilutionX int, dnamassinug Mass)(efficiency transformationEfficiency){
	cfuperugperml := calcTransformationEfficiency(colonyCount,plateoutVolumeinml,plateOutdilutionX,dnamassinug)
		
		efficiency = transformationEfficiency{
			CFUperugperml:cfuperugperml,
			MetaData: metaData{
							CFU: colonyCount,
							PlateOutVolume: plateoutVolumeinml,
							DNAMass: dnamassinug,
							DNA: seq,},
		}
		return efficiency
}

func volumeToml (volume Volume) (volumeinml float64) {
	volumeinml = volume.SIValue() * 1000
return	
}

func massToug (mass Mass) (massinug float64) {
	massinug = mass.SIValue() * 1000000000
	return
}

// Parameters to this protocol
Parameters (
	TransformationName string 
	ColonyCount int
	ControlColonyCount int
	DNAMass Mass
	ControlDNAMass Mass
	PlateOutVolume Volume
	DNA DNASequence
	ControlDNA DNASequence
	ControlPlateOutVolume Volume
)

// Output data of this protocol
Data (
	EquivalentTransformationEfficiency transformationEfficiency
	ControlTransformationEfficiency transformationEfficiency
	RelativeTransformationEfficiency relativeTransformationEfficiency
	Errors error
	Warnings error
)

// Physical inputs to this protocol
Inputs (
			
)

// Physical outputs to this protocol
Outputs (
)

// Conditions to run on startup
Setup {

}

// The core process for this protocol. These steps are executed for each input.
Steps {
	
	var platoutDilutioninX int = 1
	
	
	// calculate transformation efficiency of experiemntal sample
	EquivalentTransformationEfficiency = newTransformationEfficiency(DNA,ColonyCount,PlateOutVolume,platoutDilutioninX,DNAMass)
	
	// calculate transformation efficiency of control sample
	ControlTransformationEfficiency = newTransformationEfficiency(ControlDNA,ControlColonyCount,ControlPlateOutVolume,platoutDilutioninX,ControlDNAMass)
	
	// Calculate relative transformation efficiency
	RelativeTransformationEfficiency.ControlEfficiency = ControlTransformationEfficiency
	
	RelativeTransformationEfficiency.ExperimentalEfficiency = EquivalentTransformationEfficiency

}


// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
