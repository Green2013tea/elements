// This protocol is intended to design a combinatorial library of all combinations of lists of options for 3 parts plus vectors.
// Overhangs are added to complement the adjacent parts and leave no scar according to a specified TypeIIs Restriction Enzyme. 
// If assembly simulation fails after overhangs are added. In order to help the user
// diagnose the reason, a report of the part overhangs 
// is returned to the user along with a list of cut sites in each part.
protocol CombinatorialLibraryDesign_Scarfree3Part_wtype

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/sequences/oligos"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/export"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/search"
	"path/filepath"
)

// Input parameters for this protocol (data)
Parameters (
	EnzymeName 					string
	ProjectName					string
	Vectors						[]DNASequence
	Part1s						[]DNASequence
	Part2s						[]DNASequence
	Part3s						[]DNASequence
	SitesToRemove				[]string
	ORFStoconfirm				[]string
	BlastSearchSeqs				bool
	EndsAlreadyadded 			bool
	RemoveproblemRestrictionSites bool
	FolderPerConstruct			bool
	FolderPerProject				bool
)

// Physical Inputs to this protocol with types
Inputs (

)

// Physical outputs from this protocol with types
Outputs (
	
)

// Data which is returned from this protocol, and data types
Data (
	StatusMap map[string]string
	PartswithOverhangsMap map[string][]DNASequence // parts to order
	Assemblies map[string][]DNASequence  // parts + vector map ready for feeding into downstream AutoAssembly element
	PassMap map[string]bool
	SeqsMap map[string]DNASequence // desired sequence to end up with after assembly
	Sequences []DNASequence
	Parts[][]DNASequence
	EndreportMap  map[string]string
	PositionReportMap  map[string][]string
	PrimerMap map[string]oligos.Primer
	AssembledSequences wtype.File
	PartsToOrder []wtype.File
	PrimersToOrder []wtype.File
	
)
// Input Requirement specification
Requirements {
	// e.g. are MoClo types valid?
}

// Conditions to run on startup
Setup {}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	StatusMap = make(map[string]string)
	PartswithOverhangsMap = make(map[string][]DNASequence) // parts to order
	Assemblies = make(map[string][]DNASequence)
	PassMap = make(map[string]bool)
	SeqsMap = make(map[string]DNASequence) // desired sequence to end up with after assembly
	Sequences = make([]DNASequence,0)
	Parts = make([][]DNASequence,0)
	SequencingPrimers := make([][]DNASequence,0)
	EndreportMap  = make(map[string]string)
	PositionReportMap = make(map[string][]string)
	StatusMap = make(map[string]string)
	PrimerMap = make(map[string]oligos.Primer)
	
	var counter int = 1
	
	for j := range Vectors {
		for k := range Part1s {
			for l := range Part2s {
				for m := range Part3s {	
					
						key := 	ProjectName+"_"+Vectors[j].Name()+"_"+Part1s[k].Name()+"_"+Part2s[l].Name()+"_"+Part3s[m].Name()
						assembly := RunSteps(Scarfree_siteremove_orfcheck_wtype,
		Parameters {
					Constructname: 				key,
					Seqsinorder:				[]DNASequence{Part1s[k],Part2s[l],Part3s[m]},
					Enzymename:					EnzymeName,
					Vector:						Vectors[j],
					OtherEnzymeSitesToRemove:	SitesToRemove,
					ORFstoConfirm:				ORFStoconfirm, // enter each as amino acid sequence
					RemoveproblemRestrictionSites: RemoveproblemRestrictionSites,
					EndsAlreadyadded:			EndsAlreadyadded,
					ExporttoFastaFile: 			FolderPerConstruct,
					BlastSeqswithNoName:		BlastSearchSeqs,
				
		}, Inputs{
                    
                })
				key = key  //+ Vectors[j]
				PartswithOverhangsMap[key] = assembly.Data.PartswithOverhangs // parts to order
				Assemblies[key] = assembly.Data.PartsAndVector // parts + vector to be fed into assembly element
				PassMap[key] = assembly.Data.Simulationpass
				EndreportMap[key]  = assembly.Data.Endreport
				PositionReportMap[key] = assembly.Data.PositionReport
				SeqsMap[key] = assembly.Data.NewDNASequence
				Sequences = append(Sequences,assembly.Data.NewDNASequence)
				Parts = append(Parts,assembly.Data.PartswithOverhangs)
				StatusMap[key] = assembly.Data.Status
				
	// for each vector we'll also design sequencing primers
	
	primer := RunSteps(PrimerDesign_ColonyPCR_wtype,
	Parameters {
				FullDNASeq:assembly.Data.NewDNASequence,
				Maxtemp:    wunit.NewTemperature(72,"C"),
				Mintemp:    wunit.NewTemperature(50,"C"),
				Maxgc:    0.7,
				Minlength:   12, 
				Maxlength:  30, 
				Seqstoavoid: []string{},
				PermittednucleotideOverlapBetweenPrimers: 10, // number of nucleotides which primers can overlap by
				RegionSequence: assembly.Data.Insert, // first part
				FlankTargetSequence:true,
	}, Inputs{
                    
                })
				
				// rename primers
				primer.Data.FWDPrimer.Nm = primer.Data.FWDPrimer.Nm+ProjectName+Vectors[j].Nm+"_FWD"
				primer.Data.REVPrimer.Nm = primer.Data.REVPrimer.Nm+ProjectName+Vectors[j].Nm+"_REV"
				
				PrimerMap[key+"_FWD"]=primer.Data.FWDPrimer
				PrimerMap[key+"_REV"]=primer.Data.REVPrimer
				SequencingPrimers = append(SequencingPrimers,[]DNASequence{primer.Data.FWDPrimer.DNASequence,primer.Data.REVPrimer.DNASequence})
				counter++
	}
	}
	}
	
	// export sequence to fasta
	if FolderPerProject{
		
		var err error
		// export simulated sequences to file
		AssembledSequences, _,err = export.FastaSerial(export.LOCAL,filepath.Join(ProjectName,"AssembledSequences"), Sequences)
		
		if err != nil {
			Errorf("Error exporting sequence file for %s: %s",ProjectName,err.Error())
		}
		// add fasta file for each set of parts with overhangs
		labels:= []string{"Device1","Device2","Device3"}
		
		refactoredparts:= make(map[string][]DNASequence)
		
		newparts := make([]DNASequence,0)
		
		for _, parts := range Parts{
		
		for j := range parts{
			newparts = refactoredparts[labels[j]]
			newparts = append(newparts,parts[j])
			refactoredparts[labels[j]]=newparts
		}
		}
		
		for key,value := range refactoredparts{
			
		duplicateremoved := search.RemoveDuplicateSequences(value)
		
		file, _, err := export.FastaSerial(export.LOCAL,filepath.Join(ProjectName,key), duplicateremoved)
		
		if err != nil {
			Errorf("Error exporting parts to order file for %s %s: %s",ProjectName,key,err.Error())
		}
		
		PartsToOrder = append(PartsToOrder,file)
		}
		
		// add fasta file for each set of primers
		labels= []string{"FWDPrimers","REVPrimers"}
		
		refactoredparts = make(map[string][]DNASequence)
		
		newparts = make([]DNASequence,0)
		
		for _, parts := range SequencingPrimers{
		
		for j := range parts{
			newparts = refactoredparts[labels[j]]
			newparts = append(newparts,parts[j])
			refactoredparts[labels[j]]=newparts
		}
		}
		
		for key,value := range refactoredparts{
			
		duplicateremoved := search.RemoveDuplicateSequences(value)
		
		primerFile, _, err :=  export.FastaSerial(export.LOCAL,filepath.Join(ProjectName,key), duplicateremoved)
		
		if err != nil {
			Errorf("Error exporting primers to order file for %s %s: %s",ProjectName,key,err.Error())
		}
		
		PrimersToOrder = append(PrimersToOrder, primerFile)
		}
	
	 }
	
	}
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
