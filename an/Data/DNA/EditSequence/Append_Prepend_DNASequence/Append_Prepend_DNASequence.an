//Append_Prepend_DNASequence will take in an array of DNA sequences and Append and/or Prepend extra base pairs to the DNA sequences.
//If Append or Prepend is left blank, no extra base pairs will be added.
//Modified Sequences are outputted in a FASTA file.
protocol Append_Prepend_DNASequence

// Place golang packages to import here
import (
	"fmt"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/export"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/sequences"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"strings"
)

// Parameters to this protocol
Parameters (
	ProjectName string           //this will be used to name the output FASTA file and folder
	InputSequences []DNASequence //input DNA sequences
	AddPrefix string             //string of DNA, if empty nothing is added
	AddSuffix string             //string of DNA, if empty nothing is added
)

// Output data of this protocol
Data (
	ModifiedSequences []DNASequence //output modified DNA sequences
	Warnings error                  //error messages reported back to the user
	ModifiedSequenceFile File       //output Fasta file
)

// Physical inputs to this protocol
Inputs ()

// Physical outputs to this protocol
Outputs ()

// Conditions to run on startup
Setup {

}

// The core process for this protocol. These steps are executed for each input.
Steps {

	//setup warnings slice to append errors to
	var warnings []string

	//range through the InputSequences
	for _, editedSequence := range InputSequences {

		//check if the InputSequence is a plasmid, and return warning message if so
		if editedSequence.Plasmid {
			plasmidError := fmt.Errorf("Warning: The input DNA sequence %s is listed as a plasmid and should not be Appended/Prepended, please proceed with caution or fix", editedSequence.Nm)
			warnings = append(warnings, plasmidError.Error())
		}

		//check input sequences for illegal (non-nucleotide) characters and return error message if so
		passed, illegals, _ := sequences.Illegalnucleotides(editedSequence)

		if !passed {
			var newstatus = make([]string, 0)
			for _, illegal := range illegals {

				newstatus = append(newstatus, "part: "+editedSequence.Nm+" "+editedSequence.Seq+": contains illegalnucleotides:"+illegal.ToString())
			}
			warnings = append(warnings, strings.Join(newstatus, ""))
		}

		//Append and Prepend the given additional bp to the input sequence
		editedSequence.Append(AddSuffix)
		editedSequence.Prepend(AddPrefix)

		//append modified sequences to the ModifiedSequences array
		ModifiedSequences = append(ModifiedSequences, editedSequence)
	}

	//add the ModifiedSequences to a FASTA file in new folder with ProjectName (Default: Edited_Seqeunces)
	if ProjectName == "" {
		ProjectName = "Edited_Seqeunces"
	}

	outputFile, _, err := export.FastaSerial(export.LOCAL, ProjectName, ModifiedSequences)
	if err != nil {
		Errorf(err.Error())
	}
	ModifiedSequenceFile = outputFile

	//add all warnings to the Warnings output and report to user
	Warnings = fmt.Errorf(strings.Join(warnings, ";"))

}

// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
