// This element will design a pair of primers to cover a specified region of a sequence for colonyPCR. 
// But it's not finished yet!, please finish it off by designing the reverse primer
// go to cd $GOPATH/src/github.com/antha-lang/antha/antha/examples/workflows/AnthaAcademy/Exercises/PrimerDesignExercise
// make antharun return correct primerpairs for the three cases shown
// Design criteria such as maximum gc content, acceptable ranges of melting temperatures and primer length may be specified by the user.
protocol PrimerDesign_ColonyPCR_wtype

import (
	"fmt"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/sequences/oligos"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/text"
	//"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/sequences"
	
)
// Input parameters for this protocol
Parameters (
	FullDNASeq   wtype.DNASequence	
	Maxtemp    Temperature 
	Mintemp    Temperature 
	Maxgc      float64 // as a proportion of 1, i.e. 1 == 100%
	Minlength   int 
	Maxlength   int 
	Seqstoavoid []string
	PermittednucleotideOverlapBetweenPrimers int // number of nucleotides which primers can overlap by
	RegionSequence wtype.DNASequence
	FlankTargetSequence bool
)

// Data which is returned from this protocol
Data (
	FWDPrimer oligos.Primer // this needs to be changed to PrimerPair [2]oligo.Primer
	REVPrimer oligos.Primer
	Warnings error
)

// Physical inputs to this protocol
Inputs (

)

// Physical outputs from this protocol
Outputs (
)

Requirements {

}

// Actions to perform before protocol itself
Setup {

}

// Core process of the protocol: steps to be performed for each input
Steps {
		
	var region wtype.DNASequence = RegionSequence

	regionstart, regionend, err := oligos.FindPositioninSequence(FullDNASeq, RegionSequence) 
	
	if err != nil {
		fmt.Println("FindPositioninoligoFail with ", FullDNASeq.Nm, FullDNASeq.Seq," and ", RegionSequence.Nm, RegionSequence.Seq)
		Warnings = err
		Errorf(Warnings.Error())
	}
	
	// if true then the start oint ot design primers is moved back 150bp to ensure full region is covered
	if FlankTargetSequence && regionstart-150 >= 0 {
		region = oligos.DNAregion(FullDNASeq, regionstart-150, regionend)
	}else if FlankTargetSequence && regionstart-150 < 0 && regionstart-Maxlength >= 0{
		region = oligos.DNAregion(FullDNASeq, 0, regionend)
	}else if FlankTargetSequence && regionstart-150 < 0 && regionstart-Maxlength < 0 && FullDNASeq.Plasmid{
		region = oligos.DNAregion(FullDNASeq, len(FullDNASeq.Seq)-150, regionend)
	}else{
		region = oligos.DNAregion(FullDNASeq, regionstart, regionend)
	}
	
	
	FWDPrimer, Warnings = oligos.FWDOligoSeq(region, Maxgc, Minlength, Maxlength, Mintemp, Maxtemp, Seqstoavoid, PermittednucleotideOverlapBetweenPrimers) 
	
	if Warnings != nil {
		fmt.Println("FWDOligoSeqFail")
		Errorf(Warnings.Error())
	}
	
	fmt.Println(text.Print("FWDPrimer:",FWDPrimer))

	if FlankTargetSequence {
		region = oligos.DNAregion(FullDNASeq, regionstart, regionend+150)
	}else {
		region = oligos.DNAregion(FullDNASeq, regionstart, regionend)
	}

	
	Seqstoavoid = append(Seqstoavoid,FWDPrimer.Seq)
	
	REVPrimer, Warnings = oligos.REVOligoSeq(region, Maxgc, Minlength, Maxlength, Mintemp, Maxtemp, Seqstoavoid, PermittednucleotideOverlapBetweenPrimers) 
	
	if Warnings != nil {
		fmt.Println("REVOligoSeqFail")
		Errorf(Warnings.Error())
	}
	
	fmt.Println(text.Print("REVPrimer:",REVPrimer))
	
	

}



// Actions to perform after steps block to analyze data
Analysis {

}

Validation {

}

