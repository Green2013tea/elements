// Protocol MixNtoN performs mixing for two rows of liquid components of equal length

//This protocol takes in two arrays of components (A and B) of equal length and samples volume I of VolumeA of component i of A and transfers to a new Outplate where volume i of Volume B of component i of B is sampled into.
protocol MixNtoN

// Place golang packages to import here
import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/wunit"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
)

// Parameters to this protocol
Parameters (
	VolumesA []wunit.Volume
	VolumesB []wunit.Volume
)

// Output data of this protocol
Data (
	
)

// Physical inputs to this protocol
Inputs (
	ComponentsA []*wtype.LHComponent
	ComponentsB []*wtype.LHComponent
	OutPlate 	*wtype.LHPlate
)

// Physical outputs to this protocol
Outputs (
	MixedComponents []*wtype.LHComponent
)

// Conditions to run on startup
Setup {

}

// The core process for this protocol. These steps are executed for each input.
Steps {
	if len(ComponentsA) == len(ComponentsB) && len(VolumesA) == len(VolumesB) && len(ComponentsA) == len(VolumesA){
		for i := 0; i < len(ComponentsA); i++{		
			MixedComponents[i] = MixInto(OutPlate,"", 
			mixer.Sample(ComponentsA[i],VolumesA[i]),
			mixer.Sample(ComponentsB[i],VolumesB[i]))
		}
	}else{
		Errorf("The number of components specified in the two lists do not match! You have %s Volumes and %s Components for A and %s Volumes and %s Components for B." ,len(VolumesA), len(ComponentsA),len(ComponentsB),len(VolumesB))
	}	
}

// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
