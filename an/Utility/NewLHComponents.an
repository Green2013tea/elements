// Protocol NewLHComponents allows for making a slice of new LHComponents (liquid handling component) when they do not exist in the LHComponent library.
// The element recursively calls the AddNewLHComponent element which takes a user defined name, stock concentration and LHPolicy to apply to the NewLHComponent variable. The NewLHComponent variable must be based off
// of a TemplateComponent that already exists in the LHComponent library. The NewLHComponent output can be wired into elements as an input so that new LHComponents 
// dont need to be made and populated into the library before an element can be used
protocol NewLHComponents

// Place golang packages to import here
import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/microArch/factory"
)

// Parameters to this protocol
Parameters (
	// list of desired names for new LHComponents, if empty returns an error
	Names []string 
	
	// Stock concentration being used, 
	// if empty this defaults to TemplateComponent concentration, 
	// if only 1 entry, the entry for that will be used as a default for all
	// if a "default" is specified then that will be used as the default for all entries with no value
	// if there is no concentration associated with TemplateComponent and no default is specified, no concentration is set
	StockConcentrations map[string]Concentration 
	
	// If empty this defaults to LHPolicy of TemplateComponent LHComponent, 
	// if only 1 entry this policy is used for all
	// if a "default" is specified this policy is used for all entries with no value
	UseLHPolicy map[string]string 
)

// Output data of this protocol
Data (
	// Outputs status to return to user on any substitutions made, what the new LHComponent is called, which LHcomponent it is based off of, the concentration of this component and the LHPolicy that should be used when handling this component.
	Status map[string]string 
	// Outputs the NewLHComponent names 
	NewLHComponentNames []string
)

// Physical inputs to this protocol
Inputs (
	// This TemplateComponent must be specified in the parameters file or the element will have a run time error, 
	// if length 1, the same template is used for all
	// if "default" is specified that will be used as default for all entries with no value
	TemplateComponents map[string]*wtype.LHComponent 
)

// Physical outputs to this protocol
Outputs (
	// This is the list of NewLHComponents output that can be wired into another element and be used straight away without having to input it into the LHComponent library
	NewLHComponents []*wtype.LHComponent 
)

// Conditions to run on startup
Setup {

}

// The core process for this protocol. These steps are executed for each input.
Steps {
	
	if len(Names)==0{
		Errorf("No Names specified for new components")
	}
	
	
	// initialise default conc as empty, if not found in map, no concentration will be set unless a "default" key is used in the StockConcentrations map
	var defaultConc Concentration
	
	if _, found := StockConcentrations["default"];found{
		defaultConc = StockConcentrations["default"]
	}
	
	// if the length of the map is 1 this template will be used for all components
	// if empty the protocol will terminate with an error
	var defaultTemplate *wtype.LHComponent
	
	if len(TemplateComponents)==1{
		for _,v := range TemplateComponents{
			defaultTemplate = v
		}
	}else if _, found := TemplateComponents["default"];found{
		defaultTemplate = TemplateComponents["default"]
	}else if len(TemplateComponents)==0{
		Errorf("No template components specified")
	}
	
	// if the length of the map is 1 this lhpolicy will be used for all components
	// if empty the lhpolicy of the Template Component is used
	var defaultLHPolicy string
	
	if len(UseLHPolicy)==1{
		for _,v := range UseLHPolicy{
			defaultLHPolicy = v
		}
	}
	
	// initialise map for appending with results
	Status = make(map[string]string)
	
	// range through component names
	for _, name := range Names {
		
		var status string
		var stockConc Concentration
		var template *wtype.LHComponent
		var lhpolicy string
		var found bool
		
		// check if a concentration is specified 
		if stockConc, found = StockConcentrations[name];!found{
			stockConc = defaultConc
			status = "No concentration specified for " + name + "; "
		}
		
		// check if a template component is specified 
		if template, found = TemplateComponents[name];!found{
			template = factory.GetComponentByType(defaultTemplate.CName)
			status = status + "No template specified so using default " + defaultTemplate.CName + "; "
		}
		
		// check if an LHPolicy is specified 
		if lhpolicy, found = UseLHPolicy[name];!found{
			lhpolicy = defaultLHPolicy
			status = status + "No lhpolicy specified so using policy " + template.TypeName() +" from default component " + defaultTemplate.CName + "; " 
		}
		
	// run AddNewLHComponent element
	result := RunSteps(AddNewLHComponent,Parameters{
		Name: name,
		StockConcentration: stockConc,
		UseLHPolicy: lhpolicy,
	},Inputs{
		TemplateComponent: template,
	})
	
	// append outputs
	NewLHComponents = append(NewLHComponents,result.Outputs.NewLHComponent)
	NewLHComponentNames = append(NewLHComponentNames,result.Data.NewLHComponentName)
	Status[name] = status + result.Data.Status 
	}
	// done
}

// Run after controls and a steps block are completed to post process any data
// and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed
// correctly. Optionally, destructive tests can be performed to validate
// results on a dipstick basis
Validation {

}
