// example protocol for parsing the contents of a plate from a csv file
protocol ParsePlate
import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	inplate "github.com/antha-lang/antha/target/mixer"
	"bytes"
	"fmt"
)
// Input parameters for this protocol (data)
Parameters (
	InputCSVfile File
) 
// Data which is returned from this protocol, and data types
Data (
	Error error
	Warnings []string
)


// Physical Inputs to this protocol with types
Inputs (
   
) 
// Physical outputs from this protocol with types
Outputs (
	AllComponents []*wtype.LHComponent//Gel
	PlatewithComponents *wtype.LHPlate
	ComponentMap map[string]*wtype.LHComponent
)

// No special requirements on inputs
Requirements {
  
}

// Condititions run on startup
// Including configuring an controls required, and the blocking level needed
// for them (in this case, per plate of samples processed)
Setup {

}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	// Read file
	filecontents, err := InputCSVfile.ReadAll()
	
	if err != nil {
		Errorf(err.Error())
	}
	
	// create a reader from filecontents
	reader := bytes.NewReader(filecontents)
	
	// Parse plate from reader
	plateresult,err := inplate.ParsePlateCSV(reader) 
	
	if err != nil {
		Error = err
		Errorf(err.Error())
	}
	
	// assign LHPlate variable
	inputplate := plateresult.Plate
	
	// return any warnings from plate parsing process
	Warnings = plateresult.Warnings
	
	components := make([]*wtype.LHComponent,0)
	ComponentMap = make(map[string]*wtype.LHComponent)
	
	// get all plate components and return into both a slice and a map
	for _, wellcontents := range inputplate.AllWellPositions(wtype.BYCOLUMN){
	
	if !inputplate.WellMap()[wellcontents].Empty() {
	
	component := inputplate.WellMap()[wellcontents].WContents
	components = append(components, component)
	ComponentMap[component.CName] = component
	
		}
	}
	if len(AllComponents)==0{
		err = fmt.Errorf("No Components found when parsing plate" + InputCSVfile.Name)
		Warnings = append(Warnings,err.Error())
		Error = err
	}
	AllComponents = components
	PlatewithComponents = inputplate
	SetInputPlate(PlatewithComponents)

}
	


// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {

}

