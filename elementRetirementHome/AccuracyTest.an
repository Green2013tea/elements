protocol AccuracyTest

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/anthalib/wutil"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/microArch/driver/liquidhandling"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/doe"
	"fmt"
	"strconv"
)

// Input parameters for this protocol (data)
Parameters (
	TotalVolume Volume
	TestSolVolumes []Volume
	NumberofReplicates int
	Printasimage bool
	Imagefilename string

	NumberofBlanks int
	UseLiquidPolicyForTestSolutions bool
	LHPolicy string
	DXORJMP string
	OutputFilename string
	PipetteOnebyOne bool
	UseLHPolicyDoeforDiluent bool

)

// Data which is returned from this protocol, and data types
Data (
	Runtowelllocationmap map[string]string //[]string //map[string]string
	Runcount int
	Pixelcount int
	Errors []error
	Blankwells []string
	Runs []doe.Run
	Wellpositionarray []string
	//NeatSamplewells []string 
)


// Physical Inputs to this protocol with types
Inputs (
	TestSols []*wtype.LHComponent
	Diluent *wtype.LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Reactions []*wtype.LHComponent
)

Requirements {
}

// Conditions to run on startup
Setup {
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
		
	// declare some global variables for use later
	var rotate = false
	var autorotate = true
	var wellpositionarray = make([]string, 0)
	Runtowelllocationmap = make(map[string]string)
	Blankwells = make([]string,0)
	counter := 0
	var platenum = 1
	var runs = make([]doe.Run,1)
	var run doe.Run
	// initialise slice with a run
	runs[0]=run
	var err error
	Errors = make([]error,0)
	// work out plate layout based on picture or just in order
	
	if Printasimage {
	chosencolourpalette := image.AvailablePalettes()["Palette1"]
	positiontocolourmap, _,_ := image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette, rotate,autorotate) 
	
	//Runtowelllocationmap = make([]string,0)
	
	for location, colour := range positiontocolourmap {
		R,G,B,A := colour.RGBA()
	
		if uint8(R) == 242 && uint8(G) ==243 && uint8(B) == 242 && uint8(A) == 255 {
			continue
			}else {wellpositionarray = append(wellpositionarray,location)
		}
	}
	
	}else{
			
	wellpositionarray = OutPlate.AllWellPositions(wtype.BYCOLUMN)
	
	}
	reactions := make([]*wtype.LHComponent,0)
	
	// use first policy as reference to ensure consistent range through map values
	referencepolicy, _ := liquidhandling.GetPolicyByName(LHPolicy)
	
	referencekeys := make([]string,0)
	for key,_:= range referencepolicy {
		referencekeys = append(referencekeys,key)
	}
		
	for l := 0; l < len(TestSolVolumes); l++ {
	for k := 0; k< len(TestSols);k++{
	for j:= 0; j< NumberofReplicates;j++{
	for i := 0; i < len(runs); i++ {
		
		
		if counter==((OutPlate.WlsX*OutPlate.WlsY)+NumberofBlanks){
			fmt.Println("plate full, counter = ", counter)
			platenum++
			counter = 0
		}
		
		var eachreaction []*wtype.LHComponent
		var solution *wtype.LHComponent
		
		if PipetteOnebyOne {
		eachreaction = make([]*wtype.LHComponent, 0)
		}
		// keep default policy for diluent
		
		// diluent first
		
		// change lhpolicy if desired
		if UseLHPolicyDoeforDiluent {
				Diluent.Type, err = wtype.LiquidTypeFromString(LHPolicy)
				if err != nil {
				Errors = append(Errors,err)
				}
			}
		
		
		bufferSample := mixer.SampleForTotalVolume(Diluent, TotalVolume)
		
		if PipetteOnebyOne {
		eachreaction = append(eachreaction,bufferSample)
		}else {
			
			
		solution = MixTo(OutPlate.Type, wellpositionarray[counter],platenum,bufferSample)
		}
		// now test sample
		
		
		// change liquid class
		if UseLiquidPolicyForTestSolutions && LHPolicy != ""{
		TestSols[k].Type, err = wtype.LiquidTypeFromString(LHPolicy)
		if err != nil {
			Errors = append(Errors,err)
		}
		}
		
		if TestSolVolumes[l].RawValue() > 0.0 {
		//sample
		testSample := mixer.Sample(TestSols[k], TestSolVolumes[l])
		
		if PipetteOnebyOne {
		eachreaction = append(eachreaction,testSample)
		solution = MixTo(OutPlate.Type,wellpositionarray[counter],platenum,eachreaction...)
		} else {
		// pipette out
		//solution = MixTo(OutPlate.Type,wellpositionarray[counter],platenum, testSample)
		solution = Mix(solution,testSample)
		}
		
		
		}
		
		// get annotation info
		doerun :=  wtype.LiquidTypeName(TestSols[k].Type)
		
		volume := TestSolVolumes[l].ToString() //strconv.Itoa(wutil.RoundInt(number))+"ul"
		
		solutionname := TestSols[k].CName
		
		description := volume+"_"+solutionname+"_replicate"+strconv.Itoa(j+1)+"_platenum"+strconv.Itoa(platenum)
		//setpoints := volume+"_"+solutionname+"_replicate"+strconv.Itoa(j+1)+"_platenum"+strconv.Itoa(platenum)
		
		// add run to well position lookup table 
		Runtowelllocationmap[doerun+"_"+description]= wellpositionarray[counter]	
	
	// add additional info for each run
	fmt.Println("len(runs)", len(runs), "counter", counter, "len(wellpositionarray)", len(wellpositionarray))
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","Location_"+ description, wellpositionarray[counter])
	
	// add run order:
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","runorder_"+ description, counter)
	
	// add setpoint printout to double check correct match up:
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","LHPolicy_"+ description, doerun)

	// add plate info:
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","Plate Type", OutPlate.Type)
	
	// add plate ZStart:
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","Plate WellZStart", OutPlate.WellZStart)
	
	// add plate Height:
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","Plate Height", OutPlate.Height)
	
	// other plate offsets:
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","Plate WellXOffset", OutPlate.WellXOffset)
	
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","Plate WellYOffset", OutPlate.WellYOffset)
	
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","Plate WellXStart", OutPlate.WellXStart)
	
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","Plate WellYStart", OutPlate.WellYStart)
	
	// add LHPolicy setpoint printout to double check correct match up:
	runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","LHPolicy", doerun)
	
	// print out LHPolicy info
	policy, _ := liquidhandling.GetPolicyByName(doerun)
	
	for _,key := range referencekeys {
		runs[i] = doe.AddAdditionalHeaderandValue(runs[i],"Additional","LHPolicy"+"_"+key, policy[key])
	}
	
	reactions = append(reactions,solution)
	
	counter = counter + 1
	
	}

	}
	}
	}
	
	// export overall DOE design file showing all well locations for all conditions
	_ = doe.XLSXFileFromRuns(runs,OutputFilename,DXORJMP)
	
	// add blanks after
	
	for n := 0; n <platenum; n++ {
	for m := 0; m< NumberofBlanks; m++ {
	
		// use defualt policy for blank
		
		bufferSample := mixer.Sample(Diluent, TotalVolume)
		//eachreaction = append(eachreaction,bufferSample)
		
		// add blanks to last column of plate
		well := wutil.NumToAlpha(OutPlate.WlsY-m)+strconv.Itoa(OutPlate.WlsX)
	
		reaction := MixTo(OutPlate.Type,well, n+1,bufferSample)

		Runtowelllocationmap["Blank"+ strconv.Itoa(m+1)+" platenum"+strconv.Itoa(n+1)] = well
		
		Blankwells = append(Blankwells,well)
	
		reactions = append(reactions,reaction)
	counter = counter + 1
	
	}
	
	}
	
	Reactions = reactions
	Runcount = len(Reactions)
	Pixelcount = len(wellpositionarray)
	Runs = runs
	Wellpositionarray = wellpositionarray
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}
